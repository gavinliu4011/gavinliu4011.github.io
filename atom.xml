<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>gavinliu&#39;s blog</title>
  
  <subtitle>刘泰丞的个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://gavinliu4011.github.io/"/>
  <updated>2018-06-25T07:26:07.615Z</updated>
  <id>http://gavinliu4011.github.io/</id>
  
  <author>
    <name>GavinLiu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用Python操作Redis</title>
    <link href="http://gavinliu4011.github.io/post/9f312a12.html"/>
    <id>http://gavinliu4011.github.io/post/9f312a12.html</id>
    <published>2018-05-17T19:43:48.000Z</published>
    <updated>2018-06-25T07:26:07.615Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Redis安装和使用"><a href="#Redis安装和使用" class="headerlink" title="Redis安装和使用"></a>Redis安装和使用</h3><h4 id="Window-下安装"><a href="#Window-下安装" class="headerlink" title="Window 下安装"></a>Window 下安装</h4><p><strong>下载地址：</strong><a href="https://github.com/MSOpenTech/redis/releases" target="_blank" rel="noopener">https://github.com/MSOpenTech/redis/releases</a>。</p><p>Redis 支持 32 位和 64 位。这个需要根据你系统平台的实际情况选择，这里我们下载 <strong>Redis-x64-xxx.zip</strong>压缩包到 C 盘，解压后，将文件夹重新命名为 <strong>redis</strong>。</p><p><img src="http://www.runoob.com/wp-content/uploads/2014/11/3B8D633F-14CE-42E3-B174-FCCD48B11FF3.jpg" alt="img"></p><p>打开一个 <strong>cmd</strong> 窗口 使用cd命令切换目录到 <strong>C:\redis</strong> 运行 <strong>redis-server.exe redis.windows.conf</strong> 。</p><p>如果想方便的话，可以把 redis 的路径加到系统的环境变量里，这样就省得再输路径了，后面的那个 redis.windows.conf 可以省略，如果省略，会启用默认的。输入之后，会显示如下界面：</p><p>这时候另启一个cmd窗口，原来的不要关闭，不然就无法访问服务端了。</p><p>切换到redis目录下运行 <strong>redis-cli.exe -h 127.0.0.1 -p 6379</strong> 。</p><p>设置键值对 <strong>set myKey abc</strong></p><p>取出键值对 <strong>get myKey</strong></p><p><img src="http://www.runoob.com/wp-content/uploads/2014/11/redis-install2.jpg" alt="Redis 安装"></p><hr><h4 id="Linux-下安装"><a href="#Linux-下安装" class="headerlink" title="Linux 下安装"></a>Linux 下安装</h4><p><strong>下载地址：</strong><a href="http://redis.io/download" target="_blank" rel="noopener">http://redis.io/download</a>，下载最新稳定版本。</p><p>本文档使用3.2.11,下载并安装:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://download.redis.io/releases/redis-3.2.11.tar.gz</span><br><span class="line">$ tar -xvf redis-3.2.11.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> redis-3.2.11</span><br><span class="line">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>安装完成后,我们先改一下redis.conf的配置:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ cp redis.conf ../myredis.conf <span class="comment"># 将文件redis.conf复制到上以及文件夹下并命名为myredis.conf</span></span><br><span class="line">$ <span class="built_in">cd</span> ..</span><br><span class="line">$ vim myredis.conf</span><br><span class="line"><span class="comment"># redis.conf是一个默认的配置文件。我们可以根据需要使用自己的配置文件。</span></span><br><span class="line"><span class="comment"># 建议修改以下地方:</span></span><br><span class="line"><span class="comment"># 找到bind这个地方并修改成[bind 本机内网地址]</span></span><br><span class="line"><span class="comment"># 再找到requirepass这个地方,这里是修改redis的密码</span></span><br><span class="line"><span class="comment"># 完成上述操作后保存退出</span></span><br><span class="line">$ redis-server myredis.conf</span><br></pre></td></tr></table></figure><p>启动redis服务进程后，就可以使用测试客户端程序redis-cli和redis服务交互了,如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli -h host -p port</span><br><span class="line">$ auth [password] <span class="comment"># 这里输入的密码就是你上面设置的密码,如果没有则跳过此步骤</span></span><br><span class="line">redis 127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line">$ redis-cli -h host -p port -a password <span class="comment"># 这个命令也能登录</span></span><br></pre></td></tr></table></figure><h4 id="用Python连接Redis"><a href="#用Python连接Redis" class="headerlink" title="用Python连接Redis"></a>用Python连接Redis</h4><p>当前在本地我已经安装了 Redis 并运行在 9736 端口，密码设置为 123456</p><p>用下面例子连接Redis进行测试:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    config = &#123;</span><br><span class="line">        <span class="string">'host'</span>: <span class="string">'localhost'</span>,</span><br><span class="line">        <span class="string">'port'</span>: <span class="number">9736</span>,</span><br><span class="line">        <span class="string">'db'</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">'password'</span>: <span class="string">'123456'</span></span><br><span class="line">    &#125;</span><br><span class="line">    client = redis.Redis(**config)</span><br><span class="line">    <span class="keyword">if</span> client.ping():</span><br><span class="line">        client.set(<span class="string">'name'</span>, <span class="string">'gavinliu'</span>)</span><br><span class="line">        print(client.get(<span class="string">'name'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>在这里我们使用redis.Redis传入参数连接本地Redis服务,传入的四个参数分别为<code>Redis的地址</code>、<code>运行端口</code>、<code>使用的数据库</code>、<code>密码</code>，我们这里使用的Redis其实是继承了StrictRedis，所以在默认情况下不传这四个参数时，参数值会有默认值分别为localhost、6379、0、None。</p><p>上面运行的结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">b'gavinliu'</span></span><br></pre></td></tr></table></figure><p>在Python中使用Redis其实很方便，Redis的命令(命令详细情况可以参照<a href="http://redisdoc.com/" target="_blank" rel="noopener">Redis命令参考</a>)在Python中都能找到相应的方法，这里引用<a href="https://cuiqingcai.com/" target="_blank" rel="noopener">崔庆才老师</a>对Redis总结介绍一下Key(键)、String(字符串)、Hash(哈希表)、List(列表)、Set(集合)、SortedSet(有序集合)</p><blockquote><p><strong>Key(键)</strong></p></blockquote><table><thead><tr><th>方法</th><th>作用</th><th>参数说明</th><th>示例</th><th>示例说明</th><th>示例结果</th></tr></thead><tbody><tr><td>exists(name)</td><td>判断一个key是否存在</td><td>name: key名</td><td>redis.exists(‘name’)</td><td>是否存在name这个key</td><td>True</td></tr><tr><td>delete(name)</td><td>删除一个key</td><td>name: key名</td><td>redis.delete(‘name’)</td><td>删除name这个key</td><td>1</td></tr><tr><td>type(name)</td><td>判断key类型</td><td>name: key名</td><td>redis.type(‘name’)</td><td>判断name这个key类型</td><td>b’string’</td></tr><tr><td>keys(pattern)</td><td>获取所有符合规则的key</td><td>pattern: 匹配规则</td><td>redis.keys(‘n*’)</td><td>获取所有以n开头的key</td><td>[b’name’]</td></tr><tr><td>randomkey()</td><td>获取随机的一个key</td><td></td><td>randomkey()</td><td>获取随机的一个key</td><td>b’name’</td></tr><tr><td>rename(src, dst)</td><td>将key重命名</td><td>src: 原key名 dst: 新key名</td><td>redis.rename(‘name’, ‘nickname’)</td><td>将name重命名为nickname</td><td>True</td></tr><tr><td>dbsize()</td><td>获取当前数据库中key的数目</td><td></td><td>dbsize()</td><td>获取当前数据库中key的数目</td><td>100</td></tr><tr><td>expire(name, time)</td><td>设定key的过期时间，单位秒</td><td>name: key名 time: 秒数</td><td>redis.expire(‘name’, 2)</td><td>将name这key的过期时间设置2秒</td><td>True</td></tr><tr><td>ttl(name)</td><td>获取key的过期时间，单位秒，-1为永久不过期</td><td>name: key名</td><td>redis.ttl(‘name’)</td><td>获取name这key的过期时间</td><td>-1</td></tr><tr><td>move(name, db)</td><td>将key移动到其他数据库</td><td>name: key名 db: 数据库代号</td><td>move(‘name’, 2)</td><td>将name移动到2号数据库</td><td>True</td></tr><tr><td>flushdb()</td><td>删除当前选择数据库中的所有key</td><td></td><td>flushdb()</td><td>删除当前选择数据库中的所有key</td><td>True</td></tr><tr><td>flushall()</td><td>删除所有数据库中的所有key</td><td></td><td>flushall()</td><td>删除所有数据库中的所有key</td><td>True</td></tr></tbody></table><blockquote><p><strong>String(字符串)</strong></p></blockquote><table><thead><tr><th>方法</th><th>作用</th><th>参数说明</th><th>示例</th><th>示例说明</th><th>示例结果</th></tr></thead><tbody><tr><td>set(name, value)</td><td>给数据库中key为name的string赋予值value</td><td>name: key名 value: 值</td><td>redis.set(‘name’, ‘Bob’)</td><td>给name这个key的value赋值为Bob</td><td>True</td></tr><tr><td>get(name)</td><td>返回数据库中key为name的string的value</td><td>name: key名</td><td>redis.get(‘name’)</td><td>返回name这个key的value</td><td>b’Bob’</td></tr><tr><td>getset(name, value)</td><td>给数据库中key为name的string赋予值value并返回上次的value</td><td>name: key名 value: 新值</td><td>redis.getset(‘name’, ‘Mike’)</td><td>赋值name为Mike并得到上次的value</td><td>b’Bob’</td></tr><tr><td>mget(keys, *args)</td><td>返回多个key对应的value</td><td>keys: key的列表</td><td>redis.mget([‘name’, ‘nickname’])</td><td>返回name和nickname的value</td><td>[b’Mike’, b’Miker’]</td></tr><tr><td>setnx(name, value)</td><td>如果key不存在才设置value</td><td>name: key名</td><td>redis.setnx(‘newname’, ‘James’)</td><td>如果newname这key不存在则设置值为James</td><td>第一次运行True，第二次False</td></tr><tr><td>setex(name, time, value)</td><td>设置可以对应的值为string类型的value，并指定此键值对应的有效期</td><td>name: key名 time: 有效期 value: 值</td><td>redis.setex(‘name’, 1, ‘James’)</td><td>将name这key的值设为James，有效期1秒</td><td>True</td></tr><tr><td>setrange(name, offset, value)</td><td>设置指定key的value值的子字符串</td><td>name: key名 offset: 偏移量 value: 值</td><td>redis.set(‘name’, ‘Hello’) redis.setrange(‘name’, 6, ‘World’)</td><td>设置name为Hello字符串，并在index为6的位置补World</td><td>11，修改后的字符串长度</td></tr><tr><td>mset(mapping)</td><td>批量赋值</td><td>mapping: 字典</td><td>redis.mset({‘name1’: ‘Durant’, ‘name2’: ‘James’})</td><td>将name1设为Durant，name2设为James</td><td>True</td></tr><tr><td>msetnx(mapping)</td><td>key均不存在时才批量赋值</td><td>mapping: 字典</td><td>redis.msetnx({‘name3’: ‘Smith’, ‘name4’: ‘Curry’})</td><td>在name3和name4均不存在的情况下才设置二者值</td><td>True</td></tr><tr><td>incr(name, amount=1)</td><td>key为name的value增值操作，默认1，key不存在则被创建并设为amount</td><td>name: key名 amount:增长的值</td><td>redis.incr(‘age’, 1)</td><td>age对应的值增1，若不存在则会创建并设置为1</td><td>1，即修改后的值</td></tr><tr><td>decr(name, amount=1)</td><td>key为name的value减值操作，默认1，key不存在则被创建并设置为-amount</td><td>name: key名 amount:减少的值</td><td>redis.decr(‘age’, 1)</td><td>age对应的值减1，若不存在则会创建并设置为-1</td><td>-1，即修改后的值</td></tr><tr><td>append(key, value)</td><td>key为name的string的值附加value</td><td>key: key名</td><td>redis.append(‘nickname’, ‘OK’)</td><td>向key为nickname的值后追加OK</td><td>13，即修改后的字符串长度</td></tr><tr><td>substr(name, start, end=-1)</td><td>返回key为name的string的value的子串</td><td>name: key名 start: 起始索引 end: 终止索引，默认-1截取到末尾</td><td>redis.substr(‘name’, 1, 4)</td><td>返回key为name的值的字符串，截取索引为1-4的字符</td><td>b’ello’</td></tr><tr><td>getrange(key, start, end)</td><td>获取key的value值从start到end的子字符串</td><td>key: key名 start: 起始索引 end: 终止索引</td><td>redis.getrange(‘name’, 1, 4)</td><td>返回key为name的值的字符串，截取索引为1-4的字符</td><td>b’ello’</td></tr></tbody></table><blockquote><p><strong>Hash(哈希表)</strong></p></blockquote><p>Hash，即哈希。Redis 还提供了哈希表的数据结构，我们可以用name指定一个哈希表的名称，然后表内存储了各个键值对，用法总结如下：</p><table><thead><tr><th>方法</th><th>作用</th><th>参数说明</th><th>示例</th><th>示例说明</th><th>示例结果</th></tr></thead><tbody><tr><td>hset(name, key, value)</td><td>向key为name的hash中添加映射</td><td>name: key名 key: 映射键名 value: 映射键值</td><td>hset(‘price’, ‘cake’, 5)</td><td>向key为price的hash中添加映射关系，cake的值为5</td><td>1，即添加的映射个数</td></tr><tr><td>hsetnx(name, key, value)</td><td>向key为name的hash中添加映射，如果映射键名不存在</td><td>name: key名 key: 映射键名 value: 映射键值</td><td>hsetnx(‘price’, ‘book’, 6)</td><td>向key为price的hash中添加映射关系，book的值为6</td><td>1，即添加的映射个数</td></tr><tr><td>hget(name, key)</td><td>返回key为name的hash中field对应的value</td><td>name: key名 key: 映射键名</td><td>redis.hget(‘price’, ‘cake’)</td><td>获取key为price的hash中键名为cake的value</td><td>5</td></tr><tr><td>hmget(name, keys, *args)</td><td>返回key为name的hash中各个键对应的value</td><td>name: key名 keys: 映射键名列表</td><td>redis.hmget(‘price’, [‘apple’, ‘orange’])</td><td>获取key为price的hash中apple和orange的值</td><td>[b’3’, b’7’]</td></tr><tr><td>hmset(name, mapping)</td><td>向key为name的hash中批量添加映射</td><td>name: key名 mapping: 映射字典</td><td>redis.hmset(‘price’, {‘banana’: 2, ‘pear’: 6})</td><td>向key为price的hash中批量添加映射</td><td>True</td></tr><tr><td>hincrby(name, key, amount=1)</td><td>将key为name的hash中映射的value增加amount</td><td>name: key名 key: 映射键名 amount: 增长量</td><td>redis.hincrby(‘price’, ‘apple’, 3)</td><td>key为price的hash中apple的值增加3</td><td>6，修改后的值</td></tr><tr><td>hexists(name, key)</td><td>key为namehash中是否存在键名为key的映射</td><td>name: key名 key: 映射键名</td><td>redis.hexists(‘price’, ‘banana’)</td><td>key为price的hash中banana的值是否存在</td><td>True</td></tr><tr><td>hdel(name, *keys)</td><td>key为namehash中删除键名为key的映射</td><td>name: key名 key: 映射键名</td><td>redis.hdel(‘price’, ‘banana’)</td><td>从key为price的hash中删除键名为banana的映射</td><td>True</td></tr><tr><td>hlen(name)</td><td>从key为name的hash中获取映射个数</td><td>name: key名</td><td>redis.hlen(‘price’)</td><td>从key为price的hash中获取映射个数</td><td>6</td></tr><tr><td>hkeys(name)</td><td>从key为name的hash中获取所有映射键名</td><td>name: key名</td><td>redis.hkeys(‘price’)</td><td>从key为price的hash中获取所有映射键名</td><td>[b’cake’, b’book’, b’banana’, b’pear’]</td></tr><tr><td>hvals(name)</td><td>从key为name的hash中获取所有映射键值</td><td>name: key名</td><td>redis.hvals(‘price’)</td><td>从key为price的hash中获取所有映射键值</td><td>[b’5’, b’6’, b’2’, b’6’]</td></tr><tr><td>hgetall(name)</td><td>从key为name的hash中获取所有映射键值对</td><td>name: key名</td><td>redis.hgetall(‘price’)</td><td>从key为price的hash中获取所有映射键值对</td><td>{b’cake’: b’5’, b’book’: b’6’, b’orange’: b’7’, b’pear’: b’6’}</td></tr></tbody></table><blockquote><p><strong>List(列表)</strong></p></blockquote><p>Redis 还提供了列表存储，列表内的元素可以重复，而且可以从两端存储</p><table><thead><tr><th>方法</th><th>作用</th><th>参数说明</th><th>示例</th><th>示例说明</th><th>示例结果</th></tr></thead><tbody><tr><td>rpush(name, *values)</td><td>在key为name的list尾添加值为value的元素，可以传多个</td><td>name: key名 values: 值</td><td>redis.rpush(‘list’, 1, 2, 3)</td><td>给list这个key的list尾添加1、2、3</td><td>3，list大小</td></tr><tr><td>lpush(name, *values)</td><td>在key为name的list头添加值为value的元素，可以传多个</td><td>name: key名 values: 值</td><td>redis.lpush(‘list’, 0)</td><td>给list这个key的list头添加0</td><td>4，list大小</td></tr><tr><td>llen(name)</td><td>返回key为name的list的长度</td><td>name: key名</td><td>redis.llen(‘list’)</td><td>返回key为list的列表的长度</td><td>4</td></tr><tr><td>lrange(name, start, end)</td><td>返回key为name的list中start至end之间的元素</td><td>name: key名 start: 起始索引 end: 终止索引</td><td>redis.lrange(‘list’, 1, 3)</td><td>返回起始为1终止为3的索引范围对应的list</td><td><code>[b&#39;3&#39;, b&#39;2&#39;, b&#39;1&#39;]</code></td></tr><tr><td>ltrim(name, start, end)</td><td>截取key为name的list，保留索引为start到end的内容</td><td>name:key名 start: 起始索引 end: 终止索引</td><td>ltrim(‘list’, 1, 3)</td><td>保留key为list的索引为1到3的元素</td><td>True</td></tr><tr><td>lindex(name, index)</td><td>返回key为name的list中index位置的元素</td><td>name: key名 index: 索引</td><td>redis.lindex(‘list’, 1)</td><td>返回key为list的列表index为1的元素</td><td>b’2’</td></tr><tr><td>lset(name, index, value)</td><td>给key为name的list中index位置的元素赋值，越界则报错</td><td>name: key名 index: 索引位置 value: 值</td><td>redis.lset(‘list’, 1, 5)</td><td>将key为list的list索引1位置赋值为5</td><td>True</td></tr><tr><td>lrem(name, count, value)</td><td>删除count个key的list中值为value的元素</td><td>name: key名 count: 删除个数 value: 值</td><td>redis.lrem(‘list’, 2, 3)</td><td>将key为list的列表删除2个3</td><td>1，即删除的个数</td></tr><tr><td>lpop(name)</td><td>返回并删除key为name的list中的首元素</td><td>name: key名</td><td>redis.lpop(‘list’)</td><td>返回并删除名为list的list第一个元素</td><td>b’5’</td></tr><tr><td>rpop(name)</td><td>返回并删除key为name的list中的尾元素</td><td>name: key名</td><td>redis.rpop(‘list’)</td><td>返回并删除名为list的list最后一个元素</td><td>b’2’</td></tr><tr><td>blpop(keys, timeout=0)</td><td>返回并删除名称为在keys中的list中的首元素，如果list为空，则会一直阻塞等待</td><td>keys: key列表 timeout: 超时等待时间，0为一直等待</td><td>redis.blpop(‘list’)</td><td>返回并删除名为list的list的第一个元素</td><td>[b’5’]</td></tr><tr><td>brpop(keys, timeout=0)</td><td>返回并删除key为name的list中的尾元素，如果list为空，则会一直阻塞等待</td><td>keys: key列表 timeout: 超时等待时间，0为一直等待</td><td>redis.brpop(‘list’)</td><td>返回并删除名为list的list的最后一个元素</td><td>[b’2’]</td></tr><tr><td>rpoplpush(src, dst)</td><td>返回并删除名称为src的list的尾元素，并将该元素添加到名称为dst的list的头部</td><td>src: 源list的key dst: 目标list的key</td><td>redis.rpoplpush(‘list’, ‘list2’)</td><td>将key为list的list尾元素删除并返回并将其添加到key为list2的list头部</td><td>b’2’</td></tr></tbody></table><blockquote><p><strong>Set(集合)</strong></p></blockquote><p>Redis 还提供了集合存储，集合中的元素都是不重复的</p><table><thead><tr><th>方法</th><th>作用</th><th>参数说明</th><th>示例</th><th>示例说明</th><th>示例结果</th></tr></thead><tbody><tr><td>sadd(name, *values)</td><td>向key为name的set中添加元素</td><td>name: key名 values: 值，可为多个</td><td>redis.sadd(‘tags’, ‘Book’, ‘Tea’, ‘Coffee’)</td><td>向key为tags的set中添加Book、Tea、Coffee三个内容</td><td>3，即插入的数据个数</td></tr><tr><td>srem(name, *values)</td><td>从key为name的set中删除元素</td><td>name: key名 values: 值，可为多个</td><td>redis.srem(‘tags’, ‘Book’)</td><td>从key为tags的set中删除Book</td><td>1，即删除的数据个数</td></tr><tr><td>spop(name)</td><td>随机返回并删除key为name的set中一个元素</td><td>name: key名</td><td>redis.spop(‘tags’)</td><td>从key为tags的set中随机删除并返回该元素</td><td>b’Tea’</td></tr><tr><td>smove(src, dst, value)</td><td>从src对应的set中移除元素并添加到dst对应的set中</td><td>src: 源set dst: 目标set value: 元素值</td><td>redis.smove(‘tags’, ‘tags2’, ‘Coffee’)</td><td>从key为tags的set中删除元素Coffee并添加到key为tags2的set</td><td>True</td></tr><tr><td>scard(name)</td><td>返回key为name的set的元素个数</td><td>name: key名</td><td>redis.scard(‘tags’)</td><td>获取key为tags的set中元素个数</td><td>3</td></tr><tr><td>sismember(name, value)</td><td>测试member是否是key为name的set的元素</td><td>name:key值</td><td>redis.sismember(‘tags’, ‘Book’)</td><td>判断Book是否为key为tags的set元素</td><td>True</td></tr><tr><td>sinter(keys, *args)</td><td>返回所有给定key的set的交集</td><td>keys: key列表</td><td>redis.sinter([‘tags’, ‘tags2’])</td><td>返回key为tags的set和key为tags2的set的交集</td><td>{b’Coffee’}</td></tr><tr><td>sinterstore(dest, keys, *args)</td><td>求交集并将交集保存到dest的集合</td><td>dest:结果集合 keys:key列表</td><td>redis.sinterstore(‘inttag’, [‘tags’, ‘tags2’])</td><td>求key为tags的set和key为tags2的set的交集并保存为inttag</td><td>1</td></tr><tr><td>sunion(keys, *args)</td><td>返回所有给定key的set的并集</td><td>keys: key列表</td><td>redis.sunion([‘tags’, ‘tags2’])</td><td>返回key为tags的set和key为tags2的set的并集</td><td>{b’Coffee’, b’Book’, b’Pen’}</td></tr><tr><td>sunionstore(dest, keys, *args)</td><td>求并集并将并集保存到dest的集合</td><td>dest:结果集合 keys:key列表</td><td>redis.sunionstore(‘inttag’, [‘tags’, ‘tags2’])</td><td>求key为tags的set和key为tags2的set的并集并保存为inttag</td><td>3</td></tr><tr><td>sdiff(keys, *args)</td><td>返回所有给定key的set的差集</td><td>keys: key列表</td><td>redis.sdiff([‘tags’, ‘tags2’])</td><td>返回key为tags的set和key为tags2的set的差集</td><td>{b’Book’, b’Pen’}</td></tr><tr><td>sdiffstore(dest, keys, *args)</td><td>求差集并将差集保存到dest的集合</td><td>dest:结果集合 keys:key列表</td><td>redis.sdiffstore(‘inttag’, [‘tags’, ‘tags2’])</td><td>求key为tags的set和key为tags2的set的差集并保存为inttag</td><td>3</td></tr><tr><td>smembers(name)</td><td>返回key为name的set的所有元素</td><td>name: key名</td><td>redis.smembers(‘tags’)</td><td>返回key为tags的set的所有元素</td><td>{b’Pen’, b’Book’, b’Coffee’}</td></tr><tr><td>srandmember(name)</td><td>随机返回key为name的set的一个元素，但不删除元素</td><td>name: key值</td><td>redis.srandmember(‘tags’)</td><td>随机返回key为tags的set的一个元素</td></tr></tbody></table><blockquote><p><strong>SortedSet(有序集合)</strong></p></blockquote><p>有序集合，它相比集合多了一个分数字段，利用它我们可以对集合中的数据进行排序</p><table><thead><tr><th>方法</th><th>作用</th><th>参数说明</th><th>示例</th><th>示例说明</th><th>示例结果</th></tr></thead><tbody><tr><td>zadd(name, <em>args, *</em>kwargs)</td><td>向key为name的zset中添加元素member，score用于排序。如果该元素存在，则更新其顺序</td><td>name: key名 args: 可变参数</td><td>redis.zadd(‘grade’, 100, ‘Bob’, 98, ‘Mike’)</td><td>向key为grade的zset中添加Bob，score为100，添加Mike，score为98</td><td>2，即添加的元素个数</td></tr><tr><td>zrem(name, *values)</td><td>删除key为name的zset中的元素</td><td>name: key名 values: 元素</td><td>redis.zrem(‘grade’, ‘Mike’)</td><td>从key为grade的zset中删除Mike</td><td>1，即删除的元素个数</td></tr><tr><td>zincrby(name, value, amount=1)</td><td>如果在key为name的zset中已经存在元素value，则该元素的score增加amount，否则向该集合中添加该元素，其score的值为amount</td><td>name: key名 value: 元素 amount: 增长的score值</td><td>redis.zincrby(‘grade’, ‘Bob’, -2)</td><td>key为grade的zset中Bob的score减2</td><td>98.0，即修改后的值</td></tr><tr><td>zrank(name, value)</td><td>返回key为name的zset中元素的排名（按score从小到大排序）即下标</td><td>name: key名 value: 元素值</td><td>redis.zrank(‘grade’, ‘Amy’)</td><td>得到key为grade的zset中Amy的排名</td><td>1</td></tr><tr><td>zrevrank(name, value)</td><td>返回key为name的zset中元素的倒数排名（按score从大到小排序）即下标</td><td>name: key名 value: 元素值</td><td>redis.zrevrank(‘grade’, ‘Amy’)</td><td>得到key为grade的zset中Amy的倒数排名</td><td>2</td></tr><tr><td>zrevrange(name, start, end, withscores=False)</td><td>返回key为name的zset（按score从大到小排序）中的index从start到end的所有元素</td><td>name: key值 start: 开始索引 end: 结束索引 withscores: 是否带score</td><td>redis.zrevrange(‘grade’, 0, 3)</td><td>返回key为grade的zset前四名元素</td><td>[b’Bob’, b’Mike’, b’Amy’, b’James’]</td></tr><tr><td>zrangebyscore(name, min, max, start=None, num=None, withscores=False)</td><td>返回key为name的zset中score在给定区间的元素</td><td>name:key名 min: 最低score max:最高score start: 起始索引 num: 个数 withscores: 是否带score</td><td>redis.zrangeby score(‘grade’, 80, 95)</td><td>返回key为grade的zset中score在80和95之间的元素</td><td>[b’Amy’, b’James’]</td></tr><tr><td>zcount(name, min, max)</td><td>返回key为name的zset中score在给定区间的数量</td><td>name:key名 min: 最低score max: 最高score</td><td>redis.zcount(‘grade’, 80, 95)</td><td>返回key为grade的zset中score在80到95的元素个数</td><td>2</td></tr><tr><td>zcard(name)</td><td>返回key为name的zset的元素个数</td><td>name: key名</td><td>redis.zcard(‘grade’)</td><td>获取key为grade的zset中元素个数</td><td>3</td></tr><tr><td>zremrangebyrank(name, min, max)</td><td>删除key为name的zset中排名在给定区间的元素</td><td>name:key名 min: 最低位次 max: 最高位次</td><td>redis.zremran gebyrank(‘grade’, 0, 0)</td><td>删除key为grade的zset中排名第一的元素</td><td>1，即删除的元素个数</td></tr><tr><td>zremrangebyscore(name, min, max)</td><td>删除key为name的zset中score在给定区间的元素</td><td>name:key名 min: 最低score max:最高score</td><td>redis.zremran gebyscore (‘grade’, 80, 90)</td><td>删除score在80到90之间的元素</td><td>1，即删除的元素个数</td></tr></tbody></table><blockquote><p>注意：上面代码中由于展示显示不完全，本人做了相应的处理，原本是一个方法名的可能方法名中间会出现空格</p></blockquote><p>以上便是用Python操作Redis的总结了，在后面的项目中会常用到Redis操作，所以我们还是需要掌握一些常用操作。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Redis安装和使用&quot;&gt;&lt;a href=&quot;#Redis安装和使用&quot; class=&quot;headerlink&quot; title=&quot;Redis安装和使用&quot;&gt;&lt;/a&gt;Redis安装和使用&lt;/h3&gt;&lt;h4 id=&quot;Window-下安装&quot;&gt;&lt;a href=&quot;#Window-下安装&quot;
      
    
    </summary>
    
      <category term="Redis" scheme="http://gavinliu4011.github.io/categories/Redis/"/>
    
    
      <category term="Redis" scheme="http://gavinliu4011.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Python进程池</title>
    <link href="http://gavinliu4011.github.io/post/d1bc6a63.html"/>
    <id>http://gavinliu4011.github.io/post/d1bc6a63.html</id>
    <published>2018-01-17T21:51:06.000Z</published>
    <updated>2018-01-17T13:51:15.683Z</updated>
    
    <content type="html"><![CDATA[<h3 id="进程池"><a href="#进程池" class="headerlink" title="进程池"></a>进程池</h3><p>为什么要有进程池?</p><p>在程序实际处理问题过程中，忙时会有成千上万的任务需要被执行，闲时可能只有零星任务。那么在成千上万个任务需要被执行的时候，我们就需要去创建成千上万个进程么？首先，创建进程需要消耗时间，销毁进程也需要消耗时间。第二即便开启了成千上万的进程，操作系统也不能让他们同时执行，这样反而会影响程序的效率。因此我们不能无限制的根据任务开启或者结束进程。那么我们要怎么做呢？</p><p>在这里，要给大家介绍一个进程池的概念，定义一个池子，在里面放上固定数量的进程，有需求来了，就拿一个池中的进程来处理任务，等到处理完毕，进程并不关闭，而是将进程再放回进程池中继续等待任务。如果有很多任务需要执行，池中的进程数量不够，任务就要等待之前的进程执行任务完毕归来，拿到空闲进程才能继续执行。也就是说，池中进程的数量是固定的，那么同一时间最多有固定数量的进程在运行。这样不会增加操作系统的调度难度，还节省了开闭进程的时间，也一定程度上能够实现并发效果。</p><h3 id="multiprocess-Pool模块"><a href="#multiprocess-Pool模块" class="headerlink" title="multiprocess.Pool模块"></a>multiprocess.Pool模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pool([numprocess  [,initializer [, initargs]]]):创建进程池</span><br></pre></td></tr></table></figure><p>参数介绍 ：</p><ul><li>numprocess：要创建的进程数，如果省略，将默认使用cpu_count()的值</li><li>initializer：是每个工作进程启动时要执行的可调用对象，默认为None</li><li>initargs：是要传给initializer的参数组</li></ul><p>主要方法 ：</p><ul><li><p>p.apply(func [, args [, kwargs]]):在一个池工作进程中执行func(<em>args,*</em>kwargs),然后返回结果。</p><blockquote><p>注意：此操作并不会在所有池工作进程中并执行func函数。如果要通过不同参数并发地执行func函数，必须从不同线程调用p.apply()函数或者使用p.apply_async()</p></blockquote></li><li><p>p.apply_async(func [, args [, kwargs [, callback]]]):在一个池工作进程中执行func(<em>args,*</em>kwargs),然后返回结果。</p><blockquote><p>此方法的结果是AsyncResult类的实例，callback是可调用对象，接收输入参数。当func的结果变为可用时，将理解传递给callback。callback禁止执行任何阻塞操作，否则将接收其他异步操作中的结果。</p></blockquote></li><li><p>p.close():关闭进程池，防止进一步操作。如果所有操作持续挂起，它们将在工作进程终止前完成</p></li><li><p>P.jion():等待所有工作进程退出。此方法只能在close（）或teminate()之后调用</p></li></ul><p>其他方法：</p><p>​    方法apply_async()和map_async（）的返回值是AsyncResul的实例obj。实例具有以下方法</p><ul><li><ul><li>obj.get():返回结果，如果有必要则等待结果到达。timeout是可选的。如果在指定时间内还没有到达，将引发异常。如果远程操作中引发了异常，它将在调用此方法时再次被引发。</li><li>obj.ready():如果调用完成，返回True</li><li>obj.successful():如果调用完成且没有引发异常，返回True，如果在结果就绪之前调用此方法，引发异常</li><li>obj.wait([timeout]):等待结果变为可用</li><li>obj.terminate()：立即终止所有工作进程，同时不执行任何清理或结束任何挂起工作。如果p被垃圾回收，将自动调用此函数</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;进程池&quot;&gt;&lt;a href=&quot;#进程池&quot; class=&quot;headerlink&quot; title=&quot;进程池&quot;&gt;&lt;/a&gt;进程池&lt;/h3&gt;&lt;p&gt;为什么要有进程池?&lt;/p&gt;
&lt;p&gt;在程序实际处理问题过程中，忙时会有成千上万的任务需要被执行，闲时可能只有零星任务。那么在成千上万个
      
    
    </summary>
    
      <category term="Python进程" scheme="http://gavinliu4011.github.io/categories/Python%E8%BF%9B%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="http://gavinliu4011.github.io/tags/Python/"/>
    
      <category term="进程池" scheme="http://gavinliu4011.github.io/tags/%E8%BF%9B%E7%A8%8B%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>Python进程间通信之队列</title>
    <link href="http://gavinliu4011.github.io/post/58b02bea.html"/>
    <id>http://gavinliu4011.github.io/post/58b02bea.html</id>
    <published>2018-01-16T22:17:34.000Z</published>
    <updated>2018-01-16T14:17:43.088Z</updated>
    
    <content type="html"><![CDATA[<h3 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h3><p>进程间通信有队列（multiprocess.Queue）和管道（multiprocess.Pipe），在这里只简单介绍队列</p><h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4><h5 id="概念介绍"><a href="#概念介绍" class="headerlink" title="概念介绍"></a>概念介绍</h5><p>创建共享的进程队列，Queue是多进程安全的队列，可以使用Queue实现多进程之间的数据传递。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Queue([maxsize]) </span><br><span class="line">创建共享的进程队列。</span><br><span class="line">参数 ：maxsize是队列中允许的最大项数。如果省略此参数，则无大小限制。</span><br><span class="line">底层队列使用管道和锁定实现，另外，还需要运行支持线程以便队列中的数据传输到底层管道中</span><br></pre></td></tr></table></figure><p>方法介绍 ：</p><ul><li><p>q.get( [ block [ ,timeout ] ] ) </p><p>返回q中的一个项目。如果q为空，此方法将阻塞，直到队列中有项目可用为止。block用于控制阻塞行为，默认为True. 如果设置为False，将引发Queue.Empty异常（定义在Queue模块中）。timeout是可选超时时间，用在阻塞模式中。如果在制定的时间间隔内没有项目变为可用，将引发Queue.Empty异常。</p></li><li><p>q.get_nowait( ) </p><p>同q.get(False)方法。</p></li><li><p>q.put(item [, block [,timeout ] ] ) </p><p>将item放入队列。如果队列已满，此方法将阻塞至有空间可用为止。block控制阻塞行为，默认为True。如果设置为False，将引发Queue.Empty异常（定义在Queue库模块中）。timeout指定在阻塞模式中等待可用空间的时间长短。超时后将引发Queue.Full异常。</p></li><li><p>q.qsize() </p><p>返回队列中目前项目的正确数量。此函数的结果并不可靠，因为在返回结果和在稍后程序中使用结果之间，队列中可能添加或删除了项目。在某些系统上，此方法可能引发NotImplementedError异常。</p></li><li><p>q.empty() </p><p>如果调用此方法时 q为空，返回True。如果其他进程或线程正在往队列中添加项目，结果是不可靠的。也就是说，在返回和使用结果之间，队列中可能已经加入新的项目。</p></li><li><p>q.full() </p><p>如果q已满，返回为True. 由于线程的存在，结果也可能是不可靠的（参考q.empty（）方法）</p></li><li><p>q.close() </p><p>关闭队列，防止队列中加入更多数据。调用此方法时，后台线程将继续写入那些已入队列但尚未写入的数据，但将在此方法完成时马上关闭。如果q被垃圾收集，将自动调用此方法。关闭队列不会在队列使用者中生成任何类型的数据结束信号或异常。例如，如果某个使用者正被阻塞在get（）操作上，关闭生产者中的队列不会导致get（）方法返回错误。</p></li><li><p>q.cancel_join_thread() </p><p>不会再进程退出时自动连接后台线程。这可以防止join_thread()方法阻塞。</p></li><li><p>q.join_thread() </p><p>连接队列的后台线程。此方法用于在调用q.close()方法后，等待所有队列项被消耗。默认情况下，此方法由不是q的原始创建者的所有进程调用。调用q.cancel_join_thread()方法可以禁止这种行为。</p></li></ul><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><ul><li><p>单看队列用法 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line">q = Queue(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># put ,get ,put_nowait,get_nowait,full,empty</span></span><br><span class="line">q.put(<span class="number">3</span>)</span><br><span class="line">q.put(<span class="number">3</span>)</span><br><span class="line">q.put(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># q.put(3)   # 如果队列已经满了，程序就会停在这里，等待数据被别人取走，再将数据放入队列。</span></span><br><span class="line"><span class="comment"># 如果队列中的数据一直不被取走，程序就会永远停在这里。</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    q.put_nowait(<span class="number">3</span>)  <span class="comment"># 可以使用put_nowait，如果队列满了不会阻塞，但是会因为队列满了而报错。</span></span><br><span class="line"><span class="keyword">except</span>:  <span class="comment"># 因此我们可以用一个try语句来处理这个错误。这样程序不会一直阻塞下去，但是会丢掉这个消息。</span></span><br><span class="line">    print(<span class="string">'队列已经满了'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 因此，我们再放入数据之前，可以先看一下队列的状态，如果已经满了，就不继续put了。</span></span><br><span class="line">print(q.full())  <span class="comment"># 满了</span></span><br><span class="line"></span><br><span class="line">print(q.get())</span><br><span class="line">print(q.get())</span><br><span class="line">print(q.get())</span><br><span class="line"><span class="comment"># print(q.get()) # 同put方法一样，如果队列已经空了，那么继续取就会出现阻塞。</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    q.get_nowait(<span class="number">3</span>)  <span class="comment"># 可以使用get_nowait，如果队列满了不会阻塞，但是会因为没取到值而报错。</span></span><br><span class="line"><span class="keyword">except</span>:  <span class="comment"># 因此我们可以用一个try语句来处理这个错误。这样程序不会一直阻塞下去。</span></span><br><span class="line">    print(<span class="string">'队列已经空了'</span>)</span><br><span class="line"></span><br><span class="line">print(q.empty())  <span class="comment"># 空了</span></span><br></pre></td></tr></table></figure></li></ul><p>上面这个例子还没有加入进程通信，只是先来看看队列为我们提供的方法，以及这些方法的使用和现象 </p><ul><li><p>子进程发送数据给父进程 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(q)</span>:</span></span><br><span class="line">    q.put([time.asctime(), <span class="string">'from Eva'</span>, <span class="string">'hello'</span>])  <span class="comment"># 调用主函数中p进程传递过来的进程参数 put函数为向队列中添加一条数据。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    q = Queue()  <span class="comment"># 创建一个Queue对象</span></span><br><span class="line">    p = Process(target=func, args=(q,))  <span class="comment"># 创建一个进程</span></span><br><span class="line">    p.start()</span><br><span class="line">    print(q.get())</span><br><span class="line">    p.join()</span><br></pre></td></tr></table></figure></li></ul><p>上面是一个queue的简单应用，使用队列q对象调用get函数来取得队列中最先进入的数据 </p><ul><li><p>批量生产数据放入队列再批量获取结果 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">(q)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        res = q.get()</span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">        print(<span class="string">'%s 吃 %s'</span> % (os.getpid(), res))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span><span class="params">(q)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">        res = <span class="string">'包子%s'</span> % i</span><br><span class="line">        q.put(res)</span><br><span class="line">        print(<span class="string">'%s 生产了 %s'</span> % (os.getpid(), res))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    q = Queue()</span><br><span class="line">    <span class="comment"># 生产者们:即厨师们</span></span><br><span class="line">    p1 = Process(target=producer, args=(q,))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 消费者们:即吃货们</span></span><br><span class="line">    c1 = Process(target=consumer, args=(q,))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开始</span></span><br><span class="line">    p1.start()</span><br><span class="line">    c1.start()</span><br><span class="line">    print(<span class="string">'主'</span>)</span><br></pre></td></tr></table></figure><p><img src="..\img\process\20180629165826.png" alt=""></p></li></ul><p>问题来了，我们看结果主进程永远不会结束，原因是：生产者p在生产完后就结束了，但是消费者c在取空了q之后，则一直处于死循环中且卡在q.get()这一步。</p><p>在解决上面问题之前，这里引入一个<strong>生产者消费者模型</strong></p><h5 id="生产者消费者模型"><a href="#生产者消费者模型" class="headerlink" title="生产者消费者模型"></a>生产者消费者模型</h5><p><em>在并发编程中使用生产者和消费者模式能够解决绝大多数并发问题。该模式通过平衡生产线程和消费线程的工作能力来提高程序的整体处理数据的速度</em> </p><p><strong>为什么要使用生产者和消费者模式</strong></p><p><em>在线程世界里，生产者就是生产数据的线程，消费者就是消费数据的线程。在多线程开发当中，如果生产者处理速度很快，而消费者处理速度很慢，那么生产者就必须等待消费者处理完，才能继续生产数据。同样的道理，如果消费者的处理能力大于生产者，那么消费者就必须等待生产者。为了解决这个问题于是引入了生产者和消费者模式。</em></p><p><strong>什么是生产者消费者模式</strong></p><p><em>生产者消费者模式是通过一个容器来解决生产者和消费者的强耦合问题。生产者和消费者彼此之间不直接通讯，而通过阻塞队列来进行通讯，所以生产者生产完数据之后不用等待消费者处理，直接扔给阻塞队列，消费者不找生产者要数据，而是直接从阻塞队列里取，阻塞队列就相当于一个缓冲区，平衡了生产者和消费者的处理能力。</em></p><p>要解决上面产生的问题无非是让生产者在生产完毕后，往队列中再发一个结束信号，这样消费者在接收到结束信号后就可以break出死循环 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue</span><br><span class="line"><span class="keyword">import</span> time, random, os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">(q)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        res = q.get()</span><br><span class="line">        <span class="keyword">if</span> res <span class="keyword">is</span> <span class="keyword">None</span>: <span class="keyword">break</span>  <span class="comment"># 收到结束信号则结束</span></span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">        print(<span class="string">'%s 吃 %s'</span> % (os.getpid(), res))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span><span class="params">(q)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">        res = <span class="string">'包子%s'</span> % i</span><br><span class="line">        q.put(res)</span><br><span class="line">        print(<span class="string">'%s 生产了 %s'</span> % (os.getpid(), res))</span><br><span class="line">    q.put(<span class="keyword">None</span>)  <span class="comment"># 发送结束信号</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    q = Queue()</span><br><span class="line">    <span class="comment"># 生产者们:即厨师们</span></span><br><span class="line">    p1 = Process(target=producer, args=(q,))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 消费者们:即吃货们</span></span><br><span class="line">    c1 = Process(target=consumer, args=(q,))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开始</span></span><br><span class="line">    p1.start()</span><br><span class="line">    c1.start()</span><br><span class="line">    print(<span class="string">'主'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>注意：结束信号None，不一定要由生产者发，主进程里同样可以发，但主进程需要等生产者结束后才应该发送该信号 </p></blockquote><p>下面再看看多个消费者的例子：有几个消费者就需要发送几次结束信号 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue</span><br><span class="line"><span class="keyword">import</span> time, random, os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">(q)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        res = q.get()</span><br><span class="line">        <span class="keyword">if</span> res <span class="keyword">is</span> <span class="keyword">None</span>: <span class="keyword">break</span>  <span class="comment"># 收到结束信号则结束</span></span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">        print(<span class="string">'%s 吃 %s'</span> % (os.getpid(), res))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span><span class="params">(name, q)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">        res = <span class="string">'%s%s'</span> % (name, i)</span><br><span class="line">        q.put(res)</span><br><span class="line">        print(<span class="string">'%s 生产了 %s'</span> % (os.getpid(), res))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    q = Queue()</span><br><span class="line">    <span class="comment"># 生产者们:即厨师们</span></span><br><span class="line">    p1 = Process(target=producer, args=(<span class="string">'啤酒鸭'</span>, q))</span><br><span class="line">    p2 = Process(target=producer, args=(<span class="string">'烤鱼'</span>, q))</span><br><span class="line">    p3 = Process(target=producer, args=(<span class="string">'烧鸡'</span>, q))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 消费者们:即吃货们</span></span><br><span class="line">    c1 = Process(target=consumer, args=(q,))</span><br><span class="line">    c2 = Process(target=consumer, args=(q,))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开始</span></span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line">    p3.start()</span><br><span class="line">    c1.start()</span><br><span class="line">    c2.start()</span><br><span class="line"></span><br><span class="line">    p1.join()  <span class="comment"># 必须保证生产者全部生产完毕,才应该发送结束信号</span></span><br><span class="line">    p2.join()</span><br><span class="line">    p3.join()</span><br><span class="line">    q.put(<span class="keyword">None</span>)  <span class="comment"># 有几个消费者就应该发送几次结束信号None</span></span><br><span class="line">    q.put(<span class="keyword">None</span>)  <span class="comment"># 发送结束信号</span></span><br><span class="line">    print(<span class="string">'主'</span>)</span><br></pre></td></tr></table></figure><p>有没有发现上面的方法很low，有几个消费者就要发送几次结束信号，下面再优化一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JoinableQueue([maxsize])  </span><br><span class="line">创建可连接的共享进程队列，这就像是一个Queue对象，但队列允许项目的使用者通知生产者项目已经被成功处理。通知进程是使用共享的信号和条件变量来实现的。</span><br></pre></td></tr></table></figure><p>JoinableQueue的实例p除了与Queue对象相同的方法之外，还具有以下方法</p><p>方法介绍 ：</p><ul><li><p>q.task_done() </p><p>使用者使用此方法发出信号，表示q.get()返回的项目已经被处理。如果调用此方法的次数大于从队列中删除的项目数量，将引发ValueError异常。</p></li><li><p>q.join() </p><p>生产者将使用此方法进行阻塞，直到队列中所有项目均被处理。阻塞将持续到为队列中的每个项目均调用q.task_done()方法为止。 </p></li></ul><p>下面的例子说明如何建立永远运行的进程，使用和处理队列上的项目。生产者将项目放入队列，并等待它们被处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, JoinableQueue</span><br><span class="line"><span class="keyword">import</span> time, random, os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">(q)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        res = q.get()</span><br><span class="line">        <span class="keyword">if</span> res <span class="keyword">is</span> <span class="keyword">None</span>: <span class="keyword">break</span>  <span class="comment"># 收到结束信号则结束</span></span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">        print(<span class="string">'%s 吃 %s'</span> % (os.getpid(), res))</span><br><span class="line">        q.task_done()  <span class="comment"># 向q.join()发送一次信号,证明一个数据已经被取走了</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span><span class="params">(name, q)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">        res = <span class="string">'%s%s'</span> % (name, i)</span><br><span class="line">        q.put(res)</span><br><span class="line">        print(<span class="string">'%s 生产了 %s'</span> % (os.getpid(), res))</span><br><span class="line">    q.join()  <span class="comment"># 生产完毕，使用此方法进行阻塞，直到队列中所有项目均被处理</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    q = JoinableQueue()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生产者们:即厨师们</span></span><br><span class="line">    p1 = Process(target=producer, args=(<span class="string">'啤酒鸭'</span>, q))</span><br><span class="line">    p2 = Process(target=producer, args=(<span class="string">'烤鱼'</span>, q))</span><br><span class="line">    p3 = Process(target=producer, args=(<span class="string">'烧鸡'</span>, q))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 消费者们:即吃货们</span></span><br><span class="line">    c1 = Process(target=consumer, args=(q,))</span><br><span class="line">    c2 = Process(target=consumer, args=(q,))</span><br><span class="line">    c1.daemon = <span class="keyword">True</span></span><br><span class="line">    c2.daemon = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开始</span></span><br><span class="line">    p_l = [p1, p2, p3, c1, c2]</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> p_l:</span><br><span class="line">        p.start()</span><br><span class="line"></span><br><span class="line">    p1.join()  <span class="comment"># 必须保证生产者全部生产完毕,才应该发送结束信号</span></span><br><span class="line">    p2.join()</span><br><span class="line">    p3.join()</span><br><span class="line">    print(<span class="string">'主'</span>)</span><br><span class="line"><span class="comment"># p1,p2,p3结束了,证明c1,c2肯定全都收完了p1,p2,p3发到队列的数据</span></span><br><span class="line"><span class="comment"># 因而c1,c2也没有存在的价值了,不需要继续阻塞在进程中影响主进程了。应该随着主进程的结束而结束,所以设置成守护进程就可以了</span></span><br></pre></td></tr></table></figure><p>参考资料：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http://www.cnblogs.com/Eva-J/articles/8253549.html</span><br><span class="line">http://www.cnblogs.com/linhaifeng/articles/6817679.html</span><br><span class="line">https://www.jianshu.com/p/1200fd49b583</span><br><span class="line">https://www.jianshu.com/p/aed6067eeac9</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;进程间通信&quot;&gt;&lt;a href=&quot;#进程间通信&quot; class=&quot;headerlink&quot; title=&quot;进程间通信&quot;&gt;&lt;/a&gt;进程间通信&lt;/h3&gt;&lt;p&gt;进程间通信有队列（multiprocess.Queue）和管道（multiprocess.Pipe），在这里只简单介
      
    
    </summary>
    
      <category term="Python进程" scheme="http://gavinliu4011.github.io/categories/Python%E8%BF%9B%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="http://gavinliu4011.github.io/tags/Python/"/>
    
      <category term="进程通信" scheme="http://gavinliu4011.github.io/tags/%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1/"/>
    
      <category term="队列" scheme="http://gavinliu4011.github.io/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Python进程同步之锁</title>
    <link href="http://gavinliu4011.github.io/post/779a7de2.html"/>
    <id>http://gavinliu4011.github.io/post/779a7de2.html</id>
    <published>2018-01-15T21:43:49.000Z</published>
    <updated>2018-01-15T13:44:01.595Z</updated>
    
    <content type="html"><![CDATA[<h3 id="锁-——-multiprocess-Lock"><a href="#锁-——-multiprocess-Lock" class="headerlink" title="锁 —— multiprocess.Lock"></a>锁 —— multiprocess.Lock</h3><p>通过刚刚的学习，我们千方百计实现了程序的异步，让多个任务可以同时在几个进程中并发处理，他们之间的运行没有顺序，一旦开启也不受我们控制。尽管并发编程让我们能更加充分的利用IO资源，但是也给我们带来了新的问题。</p><p>当多个进程使用同一份数据资源的时候，就会引发数据安全或顺序混乱问题。</p><p>接下来我们以模拟抢票为例，来看看数据安全的重要性。 </p><p>先看看不使用锁保护的多进程同时抢购余票结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件ticket的内容为：&#123;"count":1&#125;</span></span><br><span class="line"><span class="comment"># 注意一定要用双引号，不然json无法识别</span></span><br><span class="line"><span class="comment"># 并发运行，效率高，但竞争写同一文件，数据写入错乱</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Lock</span><br><span class="line"><span class="keyword">import</span> time, json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">()</span>:</span></span><br><span class="line">    dic = json.load(open(<span class="string">'ticket'</span>))</span><br><span class="line">    print(<span class="string">'\033[31m剩余票数%s\033[0m'</span> % dic[<span class="string">'count'</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(i)</span>:</span></span><br><span class="line">    dic = json.load(open(<span class="string">'ticket'</span>))</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)  <span class="comment"># 模拟读数据的网络延迟</span></span><br><span class="line">    <span class="keyword">if</span> dic[<span class="string">'count'</span>] &gt; <span class="number">0</span>:</span><br><span class="line">        dic[<span class="string">'count'</span>] -= <span class="number">1</span></span><br><span class="line">        time.sleep(<span class="number">0.2</span>)  <span class="comment"># 模拟写数据的网络延迟</span></span><br><span class="line">        json.dump(dic, open(<span class="string">'ticket'</span>, <span class="string">'w'</span>))</span><br><span class="line">        print(<span class="string">'\033[32m用户%s购票成功\033[0m'</span> % i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(i)</span>:</span></span><br><span class="line">    search()</span><br><span class="line">    get(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):  <span class="comment"># 模拟并发10个客户端抢票</span></span><br><span class="line">        p = Process(target=task, args=(i,))</span><br><span class="line">        p.start()</span><br></pre></td></tr></table></figure><p>想想上面代码中会有什么样的结果出现？是只有一个用户购票成功，还是多个用户，下面一起来看看结果：</p><p><img src="..\img\process\20180629162519.png" alt=""></p><p>为什么会出现这样的情况呢？明明只有一张票，怎么会被这么多人购买成功，这个就是数据安全问题！！！</p><p>下面来解决这个数据安全问题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件ticket的内容为：&#123;"count":1&#125;</span></span><br><span class="line"><span class="comment"># 注意一定要用双引号，不然json无法识别</span></span><br><span class="line"><span class="comment"># 并发运行，效率高，但竞争写同一文件，数据写入错乱</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Lock</span><br><span class="line"><span class="keyword">import</span> time, json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">()</span>:</span></span><br><span class="line">    dic = json.load(open(<span class="string">'ticket'</span>))</span><br><span class="line">    print(<span class="string">'\033[31m剩余票数%s\033[0m'</span> % dic[<span class="string">'count'</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(i)</span>:</span></span><br><span class="line">    dic = json.load(open(<span class="string">'ticket'</span>))</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)  <span class="comment"># 模拟读数据的网络延迟</span></span><br><span class="line">    <span class="keyword">if</span> dic[<span class="string">'count'</span>] &gt; <span class="number">0</span>:</span><br><span class="line">        dic[<span class="string">'count'</span>] -= <span class="number">1</span></span><br><span class="line">        time.sleep(<span class="number">0.2</span>)  <span class="comment"># 模拟写数据的网络延迟</span></span><br><span class="line">        json.dump(dic, open(<span class="string">'ticket'</span>, <span class="string">'w'</span>))</span><br><span class="line">        print(<span class="string">'\033[32m用户%s购票成功\033[0m'</span> % i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(i, lock)</span>:</span></span><br><span class="line">    search()</span><br><span class="line">    lock.acquire()  <span class="comment"># 获取钥匙</span></span><br><span class="line">    get(i)  <span class="comment"># 有钥匙后进入方法执行代码</span></span><br><span class="line">    lock.release()  <span class="comment"># 归还钥匙</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    lock = Lock()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):  <span class="comment"># 模拟并发10个客户端抢票</span></span><br><span class="line">        p = Process(target=task, args=(i, lock))</span><br><span class="line">        p.start()</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="..\img\process\20180629163404.png" alt=""></p><blockquote><p>加锁可以保证多个进程修改同一块数据时，同一时间只能有一个任务可以进行修改，即串行的修改，没错，速度是慢了，但牺牲了速度却保证了数据安全。<br>虽然可以用文件共享数据实现进程间通信，但问题是：<br>1、效率低（共享数据基于文件，而文件是硬盘上的数据）<br>2、需要自己加锁处理</p><p>因此我们最好找寻一种解决方案能够兼顾：</p><p>1、效率高（多个进程共享一块内存的数据）</p><p>2、帮我们处理好锁问题。这就是mutiprocessing模块为我们提供的基于消息的IPC通信机制：队列和管道。<br>队列和管道都是将数据存放于内存中<br>队列又是基于（管道+锁）实现的，可以让我们从复杂的锁问题中解脱出来，<br>我们应该尽量避免使用共享数据，尽可能使用消息传递和队列，避免处理复杂的同步和锁问题，而且在进程数目增多时，往往可以获得更好的可获展性。</p></blockquote><p>参考资料：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http://www.cnblogs.com/Eva-J/articles/8253549.html</span><br><span class="line">http://www.cnblogs.com/linhaifeng/articles/6817679.html</span><br><span class="line">https://www.jianshu.com/p/1200fd49b583</span><br><span class="line">https://www.jianshu.com/p/aed6067eeac9</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;锁-——-multiprocess-Lock&quot;&gt;&lt;a href=&quot;#锁-——-multiprocess-Lock&quot; class=&quot;headerlink&quot; title=&quot;锁 —— multiprocess.Lock&quot;&gt;&lt;/a&gt;锁 —— multiprocess.Lo
      
    
    </summary>
    
      <category term="Python进程" scheme="http://gavinliu4011.github.io/categories/Python%E8%BF%9B%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="http://gavinliu4011.github.io/tags/Python/"/>
    
      <category term="进程同步" scheme="http://gavinliu4011.github.io/tags/%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5/"/>
    
      <category term="进程锁" scheme="http://gavinliu4011.github.io/tags/%E8%BF%9B%E7%A8%8B%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>Python之进程</title>
    <link href="http://gavinliu4011.github.io/post/d3c89889.html"/>
    <id>http://gavinliu4011.github.io/post/d3c89889.html</id>
    <published>2018-01-14T11:09:46.000Z</published>
    <updated>2018-01-14T03:09:55.018Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是进程"><a href="#什么是进程" class="headerlink" title="什么是进程"></a>什么是进程</h3><p>进程（Process）是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是<a href="https://baike.baidu.com/item/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F" target="_blank" rel="noopener">操作系统</a>结构的基础。在早期面向进程设计的计算机结构中，进程是程序的基本执行实体；在当代面向线程设计的计算机结构中，进程是线程的容器。程序是指令、数据及其组织形式的描述，进程是程序的实体。</p><p>狭义定义：进程是正在运行的程序的实例（an instance of a computer program that is being executed）。</p><p>广义定义：进程是一个具有一定独立功能的程序关于某个数据集合的一次运行活动。它是<a href="https://baike.baidu.com/item/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/192" target="_blank" rel="noopener">操作系统</a>动态执行的<a href="https://baike.baidu.com/item/%E5%9F%BA%E6%9C%AC%E5%8D%95%E5%85%83" target="_blank" rel="noopener">基本单元</a>，在传统的<a href="https://baike.baidu.com/item/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F" target="_blank" rel="noopener">操作系统</a>中，进程既是基本的<a href="https://baike.baidu.com/item/%E5%88%86%E9%85%8D%E5%8D%95%E5%85%83" target="_blank" rel="noopener">分配单元</a>，也是基本的执行单元。</p><h4 id="进程的概念"><a href="#进程的概念" class="headerlink" title="进程的概念"></a>进程的概念</h4><p>第一，进程是一个实体。每一个进程都有它自己的地址空间，一般情况下，包括文本区域（text region）、数据区域（data region）和堆栈（stack region）。文本区域存储处理器执行的代码；数据区域存储变量和进程执行期间使用的动态分配的内存；堆栈区域存储着活动过程调用的指令和本地变量。<br>第二，进程是一个“执行中的程序”。程序是一个没有生命的实体，只有处理器赋予程序生命时（操作系统执行之），它才能成为一个活动的实体，我们称其为进程。<br>进程是操作系统中最基本、重要的概念。是多道程序系统出现后，为了刻画系统内部出现的动态情况，描述系统内部各道程序的活动规律引进的一个概念,所有多道程序设计操作系统都建立在进程的基础上。</p><h4 id="进程的特征"><a href="#进程的特征" class="headerlink" title="进程的特征"></a>进程的特征</h4><p>动态性：进程的实质是程序在多道程序系统中的一次执行过程，进程是动态产生，动态消亡的。<br>并发性：任何进程都可以同其他进程一起并发执行<br>独立性：进程是一个能独立运行的基本单位，同时也是系统分配资源和调度的独立单位；<br>异步性：由于进程间的相互制约，使进程具有执行的间断性，即进程按各自独立的、不可预知的速度向前推进<br>结构特征：进程由程序、数据和进程控制块三部分组成。<br>多个不同的进程可以包含相同的程序：一个程序在不同的数据集里就构成不同的进程，能得到不同的结果；但是执行过程中，程序不能发生改变。</p><h4 id="进程与程序中的区别"><a href="#进程与程序中的区别" class="headerlink" title="进程与程序中的区别"></a>进程与程序中的区别</h4><p>程序是指令和数据的有序集合，其本身没有任何运行的含义，是一个静态的概念。<br>而进程是程序在处理机上的一次执行过程，它是一个动态的概念。<br>程序可以作为一种软件资料长期存在，而进程是有一定生命期的。<br>程序是永久的，进程是暂时的。</p><blockquote><p><strong>注意：同一个程序执行两次，就会在操作系统中出现两个进程，所以我们可以同时运行一个软件，分别做不同的事情也不会混乱。</strong> </p></blockquote><h3 id="进程的并行与并发"><a href="#进程的并行与并发" class="headerlink" title="进程的并行与并发"></a>进程的并行与并发</h3><p><strong>并行</strong> : 并行是指两者同时执行，比如赛跑，两个人都在不停的往前跑；（资源够用，比如三个线程，四核的CPU ）</p><p><strong>并发</strong> : 并发是指资源有限的情况下，两者交替轮流使用资源，比如一段路(单核CPU资源)同时只能过一个人，A走一段后，让给B，B用完继续给A ，交替使用，目的是提高效率。</p><p><strong>区别</strong>:</p><ul><li><strong>并行</strong>是从微观上，也就是在一个精确的时间片刻，有不同的程序在执行，这就要求必须有多个处理器。</li><li><strong>并发</strong>是从宏观上，在一个时间段上可以看出是同时执行的，比如一个服务器同时处理多个session。</li></ul><h3 id="同步异步阻塞非阻塞"><a href="#同步异步阻塞非阻塞" class="headerlink" title="同步异步阻塞非阻塞"></a>同步异步阻塞非阻塞</h3><h4 id="状态介绍"><a href="#状态介绍" class="headerlink" title="状态介绍"></a>状态介绍</h4><p><img src="..\img\process\1120359184.png" alt=""></p><p>​    在了解其他概念之前，我们首先要了解进程的几个状态。在程序运行的过程中，由于被操作系统的调度算法控制，程序会进入几个状态：就绪，运行和阻塞。</p><p>　　（1）就绪(Ready)状态</p><p>　　当进程已分配到除CPU以外的所有必要的资源，只要获得处理机便可立即执行，这时的进程状态称为就绪状态。</p><p>　　（2）执行/运行（Running）状态当进程已获得处理机，其程序正在处理机上执行，此时的进程状态称为执行状态。</p><p>　　（3）阻塞(Blocked)状态正在执行的进程，由于等待某个事件发生而无法执行时，便放弃处理机而处于阻塞状态。引起进程阻塞的事件可有多种，例如，等待I/O完成、申请缓冲区不能满足、等待信件(信号)等。</p><p><img src="..\img\process\135915799.png" alt=""></p><h4 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h4><p>​    所谓同步就是一个任务的完成需要依赖另外一个任务时，只有等待被依赖的任务完成后，依赖的任务才能算完成，这是一种可靠的任务序列。<strong>要么成功都成功，失败都失败，两个任务的状态可以保持一致。</strong></p><p>​    所谓异步是不需要等待被依赖的任务完成，只是通知被依赖的任务要完成什么工作，依赖的任务也立即执行，只要自己完成了整个任务就算完成了。<strong>至于被依赖的任务最终是否真正完成，依赖它的任务无法确定</strong>，所以它是不可靠的任务序列。</p><p>​    比如我去银行办理业务，可能会有两种方式：<br>        第一种 ：选择排队等候；<br>        第二种 ：选择取一个小纸条上面有我的号码，等到排到我这一号时由柜台的人通知我轮到我去办理业务了；</p><p>​        第一种：前者(排队等候)就是同步等待消息通知，也就是我要一直在等待银行办理业务情况；</p><p>​        第二种：后者(等待别人通知)就是异步等待消息通知。在异步消息处理中，等待消息通知者(在这个例子中就是等待办理业务的人)往往注册一个回调机制，在所等待的事件被触发时由触发机制(在这里是柜台的人)通过某种机制(在这里是写在小纸条上的号码，喊号)找到等待该事件的人。</p><h4 id="阻塞与非阻塞"><a href="#阻塞与非阻塞" class="headerlink" title="阻塞与非阻塞"></a>阻塞与非阻塞</h4><p>​    阻塞和非阻塞这两个概念与程序（线程）等待消息通知(无所谓同步或者异步)时的状态有关。也就是说阻塞与非阻塞主要是程序（线程）等待消息通知时的状态角度来说的 </p><p>​    继续上面的那个例子，不论是排队还是使用号码等待通知，如果在这个等待的过程中，等待者除了等待消息通知之外不能做其它的事情，那么该机制就是阻塞的，表现在程序中,也就是该程序一直阻塞在该函数调用处不能继续往下执行。<br>相反，有的人喜欢在银行办理这些业务的时候一边打打电话发发短信一边等待，这样的状态就是非阻塞的，因为他(等待者)没有阻塞在这个消息通知上，而是一边做自己的事情一边等待。</p><blockquote><p>注意：同步非阻塞形式实际上是效率低下的，想象一下你一边打着电话一边还需要抬头看到底队伍排到你了没有。如果把打电话和观察排队的位置看成是程序的两个操作的话，这个程序需要在这两种不同的行为之间来回的切换，效率可想而知是低下的；而异步非阻塞形式却没有这样的问题，因为打电话是你(等待者)的事情，而通知你则是柜台(消息触发机制)的事情，程序没有在两种不同的操作中来回切换。</p></blockquote><h4 id="同步-异步与阻塞-非阻塞"><a href="#同步-异步与阻塞-非阻塞" class="headerlink" title="同步/异步与阻塞/非阻塞"></a>同步/异步与阻塞/非阻塞</h4><h5 id="同步阻塞形式"><a href="#同步阻塞形式" class="headerlink" title="同步阻塞形式"></a>同步阻塞形式</h5><p>​    效率最低。拿上面的例子来说，就是你专心排队，什么别的事都不做。 </p><h5 id="异步阻塞形式"><a href="#异步阻塞形式" class="headerlink" title="异步阻塞形式"></a>异步阻塞形式</h5><p>​    如果在银行等待办理业务的人<code>采用的是异步的方式去等待消息被触发（通知）</code>，也就是领了一张小纸条，假如在这段时间里他不能离开银行做其它的事情，那么很显然，这个人被阻塞在了这个等待的操作上面； <strong>异步操作是可以被阻塞住的，只不过它不是在处理消息时阻塞，而是在等待消息通知时被阻塞。</strong> </p><h5 id="同步非阻塞形式"><a href="#同步非阻塞形式" class="headerlink" title="同步非阻塞形式"></a>同步非阻塞形式</h5><p>​    实际上是效率低下的。</p><p>​    想象一下你一边打着电话一边还需要抬头看到底队伍排到你了没有，如果把打电话和观察排队的位置看成是程序的两个操作的话，<code>这个程序需要在这两种不同的行为之间来回的切换</code>，效率可想而知是低下的。</p><h5 id="异步非阻塞形式"><a href="#异步非阻塞形式" class="headerlink" title="异步非阻塞形式"></a>异步非阻塞形式</h5><p>​    效率更高，因为打电话是你(等待者)的事情，而通知你则是柜台(消息触发机制)的事情，<code>程序没有在两种不同的操作中来回切换</code>。</p><p>​    比如说，这个人突然发觉自己烟瘾犯了，需要出去抽根烟，于是他告诉大堂经理说，排到我这个号码的时候麻烦到外面通知我一下，那么他就没有被阻塞在这个等待的操作上面，自然这个就是异步+非阻塞的方式了。</p><p>很多人会把同步和阻塞混淆，是<code>因为很多时候同步操作会以阻塞的形式表现出来</code>，同样的，很多人也会把异步和非阻塞混淆，<code>因为异步操作一般都不会在真正的IO操作处被阻塞</code>。 </p><p>下面来看看在python程序中的进程操作:</p><h3 id="在python程序中的进程操作"><a href="#在python程序中的进程操作" class="headerlink" title="在python程序中的进程操作"></a>在python程序中的进程操作</h3><p>之前已经了解了很多进程相关的理论知识，了解进程是什么应该不再困难了，刚刚我们已经了解了，运行中的程序就是一个进程。所有的进程都是通过它的父进程来创建的。因此，运行起来的python程序也是一个进程，那么我们也可以在程序中再创建进程。多个进程可以实现并发效果，也就是说，当我们的程序中存在多个进程的时候，在某些时候，就会让程序的执行速度变快。以我们之前所学的知识，并不能实现创建进程这个功能，所以我们就需要借助python中强大的模块。 </p><h4 id="multiprocess模块"><a href="#multiprocess模块" class="headerlink" title="multiprocess模块"></a>multiprocess模块</h4><p>仔细说来，multiprocess不是一个模块而是python中一个操作、管理进程的包。 之所以叫multi是取自multiple的多功能的意思,在这个包中几乎包含了和进程有关的所有子模块。由于提供的子模块非常多，为了方便大家归类记忆，我将这部分大致分为四个部分：创建进程部分，进程同步部分，进程池部分，进程之间数据共享。 </p><h4 id="multiprocess-process模块"><a href="#multiprocess-process模块" class="headerlink" title="multiprocess.process模块"></a>multiprocess.process模块</h4><h5 id="process模块介绍"><a href="#process模块介绍" class="headerlink" title="process模块介绍"></a>process模块介绍</h5><p>process模块是一个创建进程的模块，借助这个模块，就可以完成进程的创建。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Process([group [, target [, name [, args [, kwargs]]]]])，由该类实例化得到的对象，表示一个子进程中的任务（尚未启动）</span><br><span class="line"></span><br><span class="line">强调：</span><br><span class="line">1. 需要使用关键字的方式来指定参数</span><br><span class="line">2. args指定的为传给target函数的位置参数，是一个元组形式，必须有逗号</span><br><span class="line"></span><br><span class="line">参数介绍：</span><br><span class="line">1. group参数未使用，值始终为None</span><br><span class="line">2. target表示调用对象，即子进程要执行的任务</span><br><span class="line">3. args表示调用对象的位置参数元组，args=(1,2,&apos;egon&apos;,)</span><br><span class="line">4. kwargs表示调用对象的字典,kwargs=&#123;&apos;name&apos;:&apos;egon&apos;,&apos;age&apos;:18&#125;</span><br><span class="line">5. name为子进程的名称</span><br></pre></td></tr></table></figure><p>方法介绍 :</p><ul><li>p.start()：启动进程，并调用该子进程中的p.run() </li><li>p.run():进程启动时运行的方法，正是它去调用target指定的函数，我们自定义类的类中一定要实现该方法  </li><li>p.terminate():强制终止进程p，不会进行任何清理操作，如果p创建了子进程，该子进程就成了僵尸进程，使用该方法需要特别小心这种情况。如果p还保存了一个锁那么也将不会被释放，进而导致死锁</li><li>p.is_alive():如果p仍然运行，返回True</li><li>p.join([timeout]):主线程等待p终止（强调：是主线程处于等的状态，而p是处于运行的状态）。timeout是可选的超时时间，需要强调的是，p.join只能join住start开启的进程，而不能join住run开启的进程</li></ul><p>属性介绍 :</p><ul><li>p.daemon：默认值为False，如果设为True，代表p为后台运行的守护进程，当p的父进程终止时，p也随之终止，并且设定为True后，p不能创建自己的新进程，必须在p.start()之前设置</li><li>p.name:进程的名称</li><li>p.pid：进程的pid</li><li>p.exitcode:进程在运行时为None、如果为–N，表示被信号N结束(了解即可)</li><li>p.authkey:进程的身份验证键,默认是由os.urandom()随机生成的32字符的字符串。这个键的用途是为涉及网络连接的底层进程间通信提供安全性，这类连接只有在具有相同的身份验证键时才能成功（了解即可）</li></ul><h5 id="使用process模块创建进程"><a href="#使用process模块创建进程" class="headerlink" title="使用process模块创建进程"></a>使用process模块创建进程</h5><p>在一个python进程中开启子进程，start方法和并发效果。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(args1, args2)</span>:</span></span><br><span class="line">    print(args1, args2)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">'子进程 :'</span>, os.getpid())</span><br><span class="line">    print(<span class="string">'子进程的父进程 :'</span>, os.getppid())</span><br><span class="line">    print(<span class="number">12345</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p = Process(target=func, args=(<span class="string">'参数1'</span>, <span class="string">'参数2'</span>))  <span class="comment"># 注册</span></span><br><span class="line">    <span class="comment"># p是一个进程对象,还没有启动进程</span></span><br><span class="line">    p.start()  <span class="comment"># 开启了一个子进程</span></span><br><span class="line">    <span class="comment"># p.join()  # 是感知一个子进程的结束,将异步的程序改为同步</span></span><br><span class="line">    print(<span class="string">'我是父进程'</span>)</span><br><span class="line">    print(<span class="string">'*'</span> * <span class="number">10</span>)</span><br><span class="line">    print(<span class="string">'父进程 :'</span>, os.getpid())  <span class="comment"># 查看当前进程的进程号</span></span><br><span class="line">    print(<span class="string">'父进程的父进程 :'</span>, os.getppid())  <span class="comment"># 查看当前进程的父进程</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="..\img\process\20180628141032.png" alt=""></p><p>上面是单个进程，那么多个进程同时运行又是怎么样的呢？一起来看看：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(filename, content)</span>:</span></span><br><span class="line">    print(filename)</span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(content * <span class="number">10</span> * <span class="string">'*'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        p = Process(target=func, args=(<span class="string">'info%s'</span> % i, <span class="number">0</span>))</span><br><span class="line">        p_list.append(p)</span><br><span class="line">        p.start()</span><br></pre></td></tr></table></figure><p>这里同时启动了10个进程，并创建10文件向文件中写入内容，它们同时在10个进程中并发处理，但是它们之间的运行没有顺序 </p><p>运行结果：</p><p><img src="..\img\process\20180628162043.png" alt=""></p><p>那我们又怎么写入内容后查看这10个文件呢？这里我们再次用到join方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(filename, content)</span>:</span></span><br><span class="line">    print(filename)</span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(content * <span class="number">10</span> * <span class="string">'*'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        p = Process(target=func, args=(<span class="string">'info%s'</span> % i, <span class="number">0</span>))</span><br><span class="line">        p_list.append(p)</span><br><span class="line">        p.start()</span><br><span class="line">    [p.join() <span class="keyword">for</span> p <span class="keyword">in</span> p_list]  <span class="comment"># 之前的所有进程必须在这里都执行完才能执行下面的代码</span></span><br><span class="line">    print([i <span class="keyword">for</span> i <span class="keyword">in</span> os.walk(<span class="string">r'C:\GavinLiu\projects\my_process'</span>)])</span><br></pre></td></tr></table></figure><p>除了上面这些开启进程的方法，还有一种以继承Process类的形式开启进程的方式 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyProcess</span><span class="params">(Process)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, arg1, arg2)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.arg1 = arg1</span><br><span class="line">        self.arg2 = arg2</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.pid)</span><br><span class="line">        print(self.name)</span><br><span class="line">        print(self.arg1)</span><br><span class="line">        print(self.arg2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p1 = MyProcess(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    p1.start()  <span class="comment"># start会自动调用run</span></span><br><span class="line">    p2 = MyProcess(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">    p2.start()</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="..\img\process\20180628163308.png" alt=""></p><p>进程之间的数据隔离问题 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> n  <span class="comment"># 声明了一个全局变量</span></span><br><span class="line">    n = <span class="number">0</span>  <span class="comment"># 重新定义了一个n</span></span><br><span class="line">    print(<span class="string">'子进程: %s'</span> % os.getpid(), n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    n = <span class="number">100</span></span><br><span class="line">    p = Process(target=func)</span><br><span class="line">    p.start()</span><br><span class="line">    p.join()</span><br><span class="line">    print(<span class="string">'父进程: '</span>, os.getpid(), n)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="..\img\process\20180628163825.png" alt=""></p><h5 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h5><p>主进程创建守护进程</p><p>　　其一：守护进程会在主进程代码执行结束后就终止</p><p>　　其二：守护进程内无法再开启子进程,否则抛出异常：AssertionError: daemonic processes are not allowed to have children</p><blockquote><p>注意：进程之间是互相独立的，主进程代码运行结束，守护进程随即终止</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myprocess</span><span class="params">(Process)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, person)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.person = person</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(os.getpid(), self.name)</span><br><span class="line">        print(<span class="string">'%s正在和女主播聊天'</span> % self.person)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p = Myprocess(<span class="string">'少林'</span>)</span><br><span class="line">    p.daemon = <span class="keyword">True</span>  <span class="comment"># 一定要在p.start()前设置,设置p为守护进程,禁止p创建子进程,并且父进程代码执行结束,p即终止运行</span></span><br><span class="line">    p.start()</span><br><span class="line">    time.sleep(<span class="number">10</span>)  <span class="comment"># 在sleep时查看进程id对应的进程ps -ef|grep id(linux下)</span></span><br><span class="line">    print(<span class="string">'主'</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="..\img\process\20180628170154.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="number">123</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">"end123"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="number">456</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">"end456"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p1 = Process(target=foo)</span><br><span class="line">    p2 = Process(target=bar)</span><br><span class="line"></span><br><span class="line">    p1.daemon = <span class="keyword">True</span></span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    print(<span class="string">"main-------"</span>)  <span class="comment"># 打印该行则主进程代码结束,则守护进程p1应该被终止.#可能会有p1任务执行的打印信息123,因为主进程打印main----时,p1也执行了,但是随即被终止.</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="..\img\process\20180628165703.png" alt=""></p><p><img src="..\img\process\20180628165719.png" alt=""></p><p>参考资料：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http://www.cnblogs.com/Eva-J/articles/8253549.html</span><br><span class="line">http://www.cnblogs.com/linhaifeng/articles/6817679.html</span><br><span class="line">https://www.jianshu.com/p/1200fd49b583</span><br><span class="line">https://www.jianshu.com/p/aed6067eeac9</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是进程&quot;&gt;&lt;a href=&quot;#什么是进程&quot; class=&quot;headerlink&quot; title=&quot;什么是进程&quot;&gt;&lt;/a&gt;什么是进程&lt;/h3&gt;&lt;p&gt;进程（Process）是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是&lt;a h
      
    
    </summary>
    
      <category term="Python进程" scheme="http://gavinliu4011.github.io/categories/Python%E8%BF%9B%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="http://gavinliu4011.github.io/tags/Python/"/>
    
      <category term="进程" scheme="http://gavinliu4011.github.io/tags/%E8%BF%9B%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Django之中间件</title>
    <link href="http://gavinliu4011.github.io/post/11a0df73.html"/>
    <id>http://gavinliu4011.github.io/post/11a0df73.html</id>
    <published>2018-01-06T21:17:43.000Z</published>
    <updated>2018-01-06T13:17:56.988Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django中间件"><a href="#Django中间件" class="headerlink" title="Django中间件"></a>Django中间件</h1><h2 id="中间件介绍"><a href="#中间件介绍" class="headerlink" title="中间件介绍"></a>中间件介绍</h2><h3 id="什么是中间件"><a href="#什么是中间件" class="headerlink" title="什么是中间件?"></a>什么是中间件?</h3><p>官方的说法：中间件是一个用来处理Django的请求和响应的框架级别的钩子。它是一个轻量、低级别的插件系统，用于在全局范围内改变Django的输入和输出。每个中间件组件都负责做一些特定的功能。</p><p>但是由于其影响的是全局，所以需要谨慎使用，使用不当会影响性能。</p><p>说的直白一点中间件是帮助我们在视图函数执行之前和执行之后都可以做一些额外的操作，它本质上就是一个自定义类，类中定义了几个方法，Django框架会在请求的特定的时间去执行这些方法。</p><p>我们一直都在使用中间件，只是没有注意到而已，打开Django项目的settings.py文件，看到下图的MIDDLEWARE配置项。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">'django.middleware.security.SecurityMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.csrf.CsrfViewMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages.middleware.MessageMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>MIDDLEWARE配置项是一个列表，列表中是一个个字符串，这些字符串其实是一个个类，也就是一个个中间件。</p><p>我们之前已经接触过一个csrf相关的中间件了？我们一开始把他注释掉，再提交post请求的时候，就不会被forbidden了，后来学会使用csrf_token之后就不再注释这个中间件了。</p><p>那接下来就学习中间件中的方法以及这些方法什么时候被执行。</p><h2 id="自定义中间件"><a href="#自定义中间件" class="headerlink" title="自定义中间件"></a>自定义中间件</h2><p>中间件可以定义五个方法，分别是：（主要的是process_request和process_response）</p><ul><li>process_request(self,request)</li><li>process_view(self, request, view_func, view_args, view_kwargs)</li><li>process_template_response(self,request,response)</li><li>process_exception(self, request, exception)</li><li>process_response(self, request, response)</li></ul><p>以上方法的返回值可以是None或一个HttpResponse对象，如果是None，则继续按照django定义的规则向后继续执行，如果是HttpResponse对象，则直接将该对象返回给用户。</p><p>views.py中 :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    print(<span class="string">'index视图'</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'OK'</span>)</span><br></pre></td></tr></table></figure><p>下面我们来一一说明中间件的五个方法:</p><h3 id="process-request"><a href="#process-request" class="headerlink" title="process_request"></a>process_request</h3><p>先来撸一段代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MD1</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        print(<span class="string">'MD1里面的 process_request'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MD2</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        print(<span class="string">'MD2里面的 process_request'</span>)</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>在settings.py的MIDDLEWARE配置项中注册上述两个自定义中间件： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">'django.middleware.security.SecurityMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.csrf.CsrfViewMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages.middleware.MessageMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span>,</span><br><span class="line">    <span class="string">'middlewares.MD1'</span>,  <span class="comment"># 自定义中间件MD1</span></span><br><span class="line">    <span class="string">'middlewares.MD2'</span>  <span class="comment"># 自定义中间件MD2</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>完成以上操作后,我们运行一下项目并访问某个视图:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MD1里面的 process_request</span><br><span class="line">MD2里面的 process_request</span><br><span class="line">index视图</span><br></pre></td></tr></table></figure><p>再把MD1和MD2在settings.py中的位置调换一下，再访问一个视图，会发现终端中打印的内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MD2里面的 process_request</span><br><span class="line">MD1里面的 process_request</span><br><span class="line">index视图</span><br></pre></td></tr></table></figure><p>看结果我们知道：视图函数还是最后执行的，MD2比MD1先执行自己的process_request方法。</p><p>在打印一下两个自定义中间件中process_request方法中的request参数，会发现它们是同一个对象。</p><p>由此总结一下：</p><ol><li>中间件的process_request方法是在执行视图函数之前执行的。</li><li>当配置多个中间件时，会按照MIDDLEWARE中的注册顺序，也就是列表的索引值，从前到后依次执行的。（在settings.py里面设置中 从上到下的顺序）</li><li>不同中间件之间传递的request都是同一个对象</li><li>返回None，继续执行后续的中间件的process_request方法，返回response , 不执行后续的中间件的process_request方法</li></ol><h3 id="process-response"><a href="#process-response" class="headerlink" title="process_response"></a>process_response</h3><p>process_response 有两个参数，一个是request，一个是response，request就是上述例子中一样的对象，response是视图函数返回的HttpResponse对象。该方法的返回值也必须是HttpResponse对象。</p><p>给上述的MD1和MD2加上process_response方法： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MD1</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        print(<span class="string">'MD1里面的 process_request'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, request, response)</span>:</span></span><br><span class="line">        print(<span class="string">'MD1里面的 process_response'</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MD2</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        print(<span class="string">'MD2里面的 process_request'</span>)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, request, response)</span>:</span></span><br><span class="line">        print(<span class="string">'MD2里面的 process_response'</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><p> 访问一个视图，看一下终端的输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MD2里面的 process_request</span><br><span class="line">MD1里面的 process_request</span><br><span class="line">index视图</span><br><span class="line">MD1里面的 process_response</span><br><span class="line">MD2里面的 process_response</span><br></pre></td></tr></table></figure><p>看结果可知：process_response方法是在视图函数之后执行的，并且顺序是MD1比MD2先执行。(此时settings.py中 MD2比MD1先注册)</p><p>由此总结一下：</p><ol><li>多个中间件中的process_response方法是按照MIDDLEWARE中的注册顺序<strong>倒序</strong>执行的（在settings.py里面设置中 从下到上的顺序）</li><li>在请求有响应的时候执行process_response方法</li><li>该方法的返回值也必须是HttpResponse对象</li></ol><h3 id="process-view"><a href="#process-view" class="headerlink" title="process_view"></a>process_view</h3><p>process_view(self, request, view_func, view_args, view_kwargs)</p><p>该方法有四个参数</p><p>request是HttpRequest对象。</p><p>view_func是Django即将使用的视图函数。 （它是实际的函数对象，而不是函数的名称作为字符串。）</p><p>view_args是将传递给视图的位置参数的列表.</p><p>view_kwargs是将传递给视图的关键字参数的字典。 view_args和view_kwargs都不包含第一个视图参数（request）。</p><p>Django会在调用视图函数之前调用process_view方法。</p><p>它应该返回None或一个HttpResponse对象。 如果返回None，Django将继续处理这个请求，执行任何其他中间件的process_view方法，然后在执行相应的视图。 如果它返回一个HttpResponse对象，Django不会调用适当的视图函数。 它将执行中间件的process_response方法并将应用到该HttpResponse并返回结果。</p><p> 给MD1和MD2添加process_view方法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MD1</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        print(<span class="string">'MD1里面的 process_request'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, request, response)</span>:</span></span><br><span class="line">        print(<span class="string">'MD1里面的 process_response'</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_view</span><span class="params">(self, request, view_func, view_args, view_kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'-'</span> * <span class="number">80</span>)</span><br><span class="line">        print(<span class="string">'MD1 中的process_view'</span>)</span><br><span class="line">        print(view_func, view_func.__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MD2</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        print(<span class="string">'MD2里面的 process_request'</span>)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, request, response)</span>:</span></span><br><span class="line">        print(<span class="string">'MD2里面的 process_response'</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_view</span><span class="params">(self, request, view_func, view_args, view_kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'-'</span> * <span class="number">80</span>)</span><br><span class="line">        print(<span class="string">'MD2 中的process_view'</span>)</span><br><span class="line">        print(view_func, view_func.__name__)</span><br></pre></td></tr></table></figure><p>访问index视图函数，看一下输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">MD2里面的 process_request</span><br><span class="line">MD1里面的 process_request</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">MD2 中的process_view</span><br><span class="line">&lt;function index at 0x000001DE68317488&gt; index</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">MD1 中的process_view</span><br><span class="line">&lt;function index at 0x000001DE68317488&gt; index</span><br><span class="line">index视图</span><br><span class="line">MD1里面的 process_response</span><br><span class="line">MD2里面的 process_response</span><br></pre></td></tr></table></figure><p>process_view方法是在process_request之后，视图函数之前执行的，执行顺序按照MIDDLEWARE中的注册顺序<strong>从前到后顺序</strong>执行的，返回None，继续执行后续的中间件的process_view方法，返回response , 不执行后续的中间件的process_view方法。</p><h3 id="process-exception"><a href="#process-exception" class="headerlink" title="process_exception"></a>process_exception</h3><p>process_exception(self, request, exception)</p><p>该方法两个参数:</p><p>一个HttpRequest对象</p><p>一个exception是视图函数异常产生的Exception对象。</p><p>这个方法只有在视图函数中出现异常了才执行，它返回的值可以是一个None也可以是一个HttpResponse对象。如果是HttpResponse对象，Django将调用模板和中间件中的process_response方法，并返回给浏览器，否则将默认处理异常。如果返回一个None，则交给下一个中间件的process_exception方法来处理异常。它的执行顺序也是按照中间件注册顺序的<strong>倒序</strong>执行。</p><p> 给MD1和MD2添加上这个方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MD1</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        print(<span class="string">'MD1里面的 process_request'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, request, response)</span>:</span></span><br><span class="line">        print(<span class="string">'MD1里面的 process_response'</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_view</span><span class="params">(self, request, view_func, view_args, view_kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'-'</span> * <span class="number">80</span>)</span><br><span class="line">        print(<span class="string">'MD1 中的process_view'</span>)</span><br><span class="line">        print(view_func, view_func.__name__)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_exception</span><span class="params">(self, request, exception)</span>:</span></span><br><span class="line">        print(exception)</span><br><span class="line">        print(<span class="string">'MD1 中的process_exception'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MD2</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        print(<span class="string">'MD2里面的 process_request'</span>)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, request, response)</span>:</span></span><br><span class="line">        print(<span class="string">'MD2里面的 process_response'</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_view</span><span class="params">(self, request, view_func, view_args, view_kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'-'</span> * <span class="number">80</span>)</span><br><span class="line">        print(<span class="string">'MD2 中的process_view'</span>)</span><br><span class="line">        print(view_func, view_func.__name__)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_exception</span><span class="params">(self, request, exception)</span>:</span></span><br><span class="line">        print(exception)</span><br><span class="line">        print(<span class="string">'MD2 中的process_exception'</span>)</span><br></pre></td></tr></table></figure><p>如果视图函数中无异常，process_exception方法不执行。</p><p>想办法，在视图函数中抛出一个异常：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    print(<span class="string">'index视图'</span>)</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">'呵呵'</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'OK'</span>)</span><br></pre></td></tr></table></figure><p>在MD1的process_exception中返回一个响应对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MD1</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        print(<span class="string">'MD1里面的 process_request'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, request, response)</span>:</span></span><br><span class="line">        print(<span class="string">'MD1里面的 process_response'</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_view</span><span class="params">(self, request, view_func, view_args, view_kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'-'</span> * <span class="number">80</span>)</span><br><span class="line">        print(<span class="string">'MD1 中的process_view'</span>)</span><br><span class="line">        print(view_func, view_func.__name__)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_exception</span><span class="params">(self, request, exception)</span>:</span></span><br><span class="line">        print(exception)</span><br><span class="line">        print(<span class="string">'MD1 中的process_exception'</span>)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(str(exception))  <span class="comment"># 返回一个响应对象</span></span><br></pre></td></tr></table></figure><p>看输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">MD2里面的 process_request</span><br><span class="line">MD1里面的 process_request</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">MD2 中的process_view</span><br><span class="line">&lt;function index at 0x0000022C09727488&gt; index</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">MD1 中的process_view</span><br><span class="line">&lt;function index at 0x0000022C09727488&gt; index</span><br><span class="line">index视图</span><br><span class="line">呵呵</span><br><span class="line">MD1 中的process_exception</span><br><span class="line">MD1里面的 process_response</span><br><span class="line">MD2里面的 process_response</span><br></pre></td></tr></table></figure><p>注意，这里并没有执行MD2的process_exception方法，因为MD1中的process_exception方法直接返回了一个响应对象。</p><h3 id="process-template-response"><a href="#process-template-response" class="headerlink" title="process_template_response"></a>process_template_response</h3><p>process_template_response(self, request, response)</p><p>它的参数，一个HttpRequest对象，response是TemplateResponse对象（由视图函数或者中间件产生）。</p><p>process_template_response是在视图函数执行完成后立即执行，但是它有一个前提条件，那就是视图函数返回的对象有一个render()方法（或者表明该对象是一个TemplateResponse对象或等价方法）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MD1</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        print(<span class="string">'MD1里面的 process_request'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, request, response)</span>:</span></span><br><span class="line">        print(<span class="string">'MD1里面的 process_response'</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_view</span><span class="params">(self, request, view_func, view_args, view_kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'-'</span> * <span class="number">80</span>)</span><br><span class="line">        print(<span class="string">'MD1 中的process_view'</span>)</span><br><span class="line">        print(view_func, view_func.__name__)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_exception</span><span class="params">(self, request, exception)</span>:</span></span><br><span class="line">        print(exception)</span><br><span class="line">        print(<span class="string">'MD1 中的process_exception'</span>)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(str(exception))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_template_response</span><span class="params">(self, request, response)</span>:</span></span><br><span class="line">        print(<span class="string">'MD1 中的process_template_response'</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MD2</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        print(<span class="string">'MD2里面的 process_request'</span>)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, request, response)</span>:</span></span><br><span class="line">        print(<span class="string">'MD2里面的 process_response'</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_view</span><span class="params">(self, request, view_func, view_args, view_kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'-'</span> * <span class="number">80</span>)</span><br><span class="line">        print(<span class="string">'MD2 中的process_view'</span>)</span><br><span class="line">        print(view_func, view_func.__name__)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_exception</span><span class="params">(self, request, exception)</span>:</span></span><br><span class="line">        print(exception)</span><br><span class="line">        print(<span class="string">'MD2 中的process_exception'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_template_response</span><span class="params">(self, request, response)</span>:</span></span><br><span class="line">        print(<span class="string">'MD2 中的process_template_response'</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><p>修改views.py中代码 :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    print(<span class="string">'index视图'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">render</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'render'</span>)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'render'</span>)</span><br><span class="line">    rep = HttpResponse(<span class="string">'OK'</span>)</span><br><span class="line">    rep.render = render</span><br><span class="line">    <span class="keyword">return</span> rep</span><br></pre></td></tr></table></figure><p>访问index视图，终端输出的结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">MD2里面的 process_request</span><br><span class="line">MD1里面的 process_request</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">MD2 中的process_view</span><br><span class="line">&lt;function index at 0x000001C111B97488&gt; index</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">MD1 中的process_view</span><br><span class="line">&lt;function index at 0x000001C111B97488&gt; index</span><br><span class="line">index视图</span><br><span class="line">MD1 中的process_template_response</span><br><span class="line">MD2 中的process_template_response</span><br><span class="line">render</span><br><span class="line">MD1里面的 process_response</span><br><span class="line">MD2里面的 process_response</span><br></pre></td></tr></table></figure><p>从结果看出：</p><p>视图函数执行完之后，立即执行了中间件的process_template_response方法，顺序是倒序，先执行MD1的，在执行MD2的，接着执行了视图函数返回的HttpResponse对象的render方法，返回了一个新的HttpResponse对象，接着执行中间件的process_response方法。</p><h2 id="中间件的执行流程"><a href="#中间件的执行流程" class="headerlink" title="中间件的执行流程"></a>中间件的执行流程</h2><p>上面我们一一了解了中间件中的5个方法，它们的参数、返回值以及什么时候执行，现在总结一下中间件的执行流程。 </p><p>请求到达中间件之后，先按照正序执行每个注册中间件的process_reques方法，process_request方法返回的值是None，就依次执行，如果返回的值是HttpResponse对象，不再执行后面的process_request方法，而是执行当前对应中间件的process_response方法，将HttpResponse对象返回给浏览器。也就是说：如果MIDDLEWARE中注册了6个中间件，执行过程中，第3个中间件返回了一个HttpResponse对象，那么第4,5,6中间件的process_request和process_response方法都不执行，顺序执行3,2,1中间件的process_response方法。</p><p><img src="..\img\django\middlewares1.png" alt="图一"> </p><p>process_request方法都执行完后，匹配路由，找到要执行的视图函数，先不执行视图函数，先执行中间件中的process_view方法，process_view方法返回None，继续按顺序执行，所有process_view方法执行完后执行视图函数。假如中间件3 的process_view方法返回了HttpResponse对象，则4,5,6的process_view以及视图函数都不执行，直接从最后一个中间件，也就是中间件6的process_response方法开始倒序执行。 </p><p><img src="..\img\django\867021-20180409214307195-1684061444.png" alt="图二"></p><p>process_template_response和process_exception两个方法的触发是有条件的，执行顺序也是倒序。总结所有的执行流程如下： </p><p><img src="..\img\django\286908304.png" alt="图三"></p><p><img src="..\img\django\2137571775.png" alt="图四"></p><h2 id="Django请求流程图"><a href="#Django请求流程图" class="headerlink" title="Django请求流程图"></a>Django请求流程图</h2><p><img src="..\img\django\196913305.png" alt="图五"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Django中间件&quot;&gt;&lt;a href=&quot;#Django中间件&quot; class=&quot;headerlink&quot; title=&quot;Django中间件&quot;&gt;&lt;/a&gt;Django中间件&lt;/h1&gt;&lt;h2 id=&quot;中间件介绍&quot;&gt;&lt;a href=&quot;#中间件介绍&quot; class=&quot;header
      
    
    </summary>
    
      <category term="Django之中间件" scheme="http://gavinliu4011.github.io/categories/Django%E4%B9%8B%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
      <category term="Python" scheme="http://gavinliu4011.github.io/tags/Python/"/>
    
      <category term="Django" scheme="http://gavinliu4011.github.io/tags/Django/"/>
    
      <category term="中间件" scheme="http://gavinliu4011.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Django(二)之模型</title>
    <link href="http://gavinliu4011.github.io/post/2116a065.html"/>
    <id>http://gavinliu4011.github.io/post/2116a065.html</id>
    <published>2017-10-30T22:29:28.000Z</published>
    <updated>2017-10-30T14:29:36.680Z</updated>
    
    <content type="html"><![CDATA[<p>本文档使用Django 2.x，Django是一个基于MVC架构的Web框架，MVC架构要追求的是模型和视图的解耦合，而其中的模型说得更直白一些就是数据，所以通常也被称作数据模型。在实际的项目中，数据模型通常通过数据库实现持久化操作，而关系型数据库在很长一段时间都是持久化的首选方案，在我们的OA项目中，我们选择使用MySQL来实现数据持久化。</p><h3 id="配置关系型数据库MySQL"><a href="#配置关系型数据库MySQL" class="headerlink" title="配置关系型数据库MySQL"></a>配置关系型数据库MySQL</h3><ol><li><p>进入oa文件夹，修改项目的settings.py文件，首先将我们之前创建的应用hrs添加已安装的项目中，然后配置MySQL作为持久化方案。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">(venv)$</span><span class="bash"> <span class="built_in">cd</span> oa</span></span><br><span class="line"><span class="meta">(venv)$</span><span class="bash"> vim settings.py</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此处省略上面的代码</span></span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="string">'hrs'</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'oa'</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'localhost'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>: <span class="number">3306</span>,</span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'root'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'123456'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此处省略下面的代码</span></span><br></pre></td></tr></table></figure><p>在配置ENGINE属性时，常用的可选值包括：</p><ul><li><code>&#39;django.db.backends.sqlite3&#39;</code>：SQLite嵌入式数据库</li><li><code>&#39;django.db.backends.postgresql&#39;</code>：BSD许可证下发行的开源关系型数据库产品</li><li><code>&#39;django.db.backends.mysql&#39;</code>：转手多次目前属于甲骨文公司的经济高效的数据库产品</li><li><code>&#39;django.db.backends.oracle&#39;</code>：甲骨文公司的旗舰关系型数据库产品</li></ul><p>其他的配置可以参考官方文档中<a href="https://docs.djangoproject.com/zh-hans/2.0/ref/databases/#third-party-notes" target="_blank" rel="noopener">数据库配置</a>的部分。</p><p>NAME属性代表数据库的名称，如果使用SQLite它对应着一个文件，在这种情况下NAME的属性值应该是一个绝对路径。如果使用其他关系型数据库，还要配置对应的HOST（主机）、PORT（端口）、USER（用户名）、PASSWORD（口令）等属性。</p></li><li><p>安装MySQL客户端工具，Python 3中使用PyMySQL，Python 2中用MySQLdb。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">(venv)$</span><span class="bash"> pip install pymysql</span></span><br></pre></td></tr></table></figure><p>如果使用Python 3需要修改<strong>项目</strong>的<code>__init__.py</code>文件并加入如下所示的代码，这段代码的作用是将PyMySQL视为MySQLdb来使用，从而避免Django找不到连接MySQL的客户端工具而询问你：“Did you install mysqlclient? ”（你安装了mysqlclient吗？）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure></li><li><p>运行manage.py并指定migrate参数实现数据库迁移，为应用程序创建对应的数据表，当然在此之前需要<strong>先启动MySQL数据库服务器并创建名为oa的数据库</strong>，在MySQL中创建数据库的语句如下所示。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> <span class="keyword">if</span> <span class="keyword">exists</span> oa;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> oa <span class="keyword">default</span> <span class="keyword">charset</span> utf8;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">(venv)$</span><span class="bash"> <span class="built_in">cd</span> ..</span></span><br><span class="line"><span class="meta">(venv)$</span><span class="bash"> python manage.py migrate</span></span><br><span class="line">Operations to perform:</span><br><span class="line">  Apply all migrations: admin, auth, contenttypes, sessions</span><br><span class="line">Running migrations:</span><br><span class="line">  Applying contenttypes.0001_initial... OK</span><br><span class="line">  Applying auth.0001_initial... OK</span><br><span class="line">  Applying admin.0001_initial... OK</span><br><span class="line">  Applying admin.0002_logentry_remove_auto_add... OK</span><br><span class="line">  Applying contenttypes.0002_remove_content_type_name... OK</span><br><span class="line">  Applying auth.0002_alter_permission_name_max_length... OK</span><br><span class="line">  Applying auth.0003_alter_user_email_max_length... OK</span><br><span class="line">  Applying auth.0004_alter_user_username_opts... OK</span><br><span class="line">  Applying auth.0005_alter_user_last_login_null... OK</span><br><span class="line">  Applying auth.0006_require_contenttypes_0002... OK</span><br><span class="line">  Applying auth.0007_alter_validators_add_error_messages... OK</span><br><span class="line">  Applying auth.0008_alter_user_username_max_length... OK</span><br><span class="line">  Applying auth.0009_alter_user_last_name_max_length... OK</span><br><span class="line">  Applying sessions.0001_initial... OK</span><br></pre></td></tr></table></figure></li><li><p>可以看到，Django帮助我们创建了10张表，这些都是使用Django框架需要的东西，稍后我们就会用到这些表。除此之外，我们还应该为我们自己的应用创建数据模型。如果要在hrs应用中实现对部门和员工的管理，我们可以创建如下所示的数据模型。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">(venv)$</span><span class="bash"> <span class="built_in">cd</span> hrs</span></span><br><span class="line"><span class="meta">(venv)$</span><span class="bash"> vim models.py</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dept</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""部门类"""</span></span><br><span class="line">    </span><br><span class="line">    no = models.IntegerField(primary_key=<span class="keyword">True</span>, db_column=<span class="string">'dno'</span>, verbose_name=<span class="string">'部门编号'</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">20</span>, db_column=<span class="string">'dname'</span>, verbose_name=<span class="string">'部门名称'</span>)</span><br><span class="line">    location = models.CharField(max_length=<span class="number">10</span>, db_column=<span class="string">'dloc'</span>, verbose_name=<span class="string">'部门所在地'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'tb_dept'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Emp</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""员工类"""</span></span><br><span class="line">    </span><br><span class="line">    no = models.IntegerField(primary_key=<span class="keyword">True</span>, db_column=<span class="string">'eno'</span>, verbose_name=<span class="string">'员工编号'</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">20</span>, db_column=<span class="string">'ename'</span>, verbose_name=<span class="string">'员工姓名'</span>)</span><br><span class="line">    job = models.CharField(max_length=<span class="number">10</span>, verbose_name=<span class="string">'职位'</span>)</span><br><span class="line">    <span class="comment"># 自参照完整性多对一外键关联</span></span><br><span class="line">    mgr = models.ForeignKey(<span class="string">'self'</span>, on_delete=models.SET_NULL, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>, verbose_name=<span class="string">'主管编号'</span>)</span><br><span class="line">    sal = models.DecimalField(max_digits=<span class="number">7</span>, decimal_places=<span class="number">2</span>, verbose_name=<span class="string">'月薪'</span>)</span><br><span class="line">    comm = models.DecimalField(max_digits=<span class="number">7</span>, decimal_places=<span class="number">2</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>, verbose_name=<span class="string">'补贴'</span>)</span><br><span class="line">    dept = models.ForeignKey(Dept, db_column=<span class="string">'dno'</span>, on_delete=models.PROTECT, verbose_name=<span class="string">'所在部门'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'tb_emp'</span></span><br></pre></td></tr></table></figure><blockquote><p>说明：上面定义模型时使用了字段类及其属性，其中IntegerField对应数据库中的integer类型，CharField对应数据库的varchar类型，DecimalField对应数据库的decimal类型，ForeignKey用来建立多对一外键关联。字段属性primary_key用于设置主键，max_length用来设置字段的最大长度，db_column用来设置数据库中与字段对应的列，verbose_name则设置了Django后台管理系统中该字段显示的名称。如果对这些东西感到很困惑也不要紧，文末提供了字段类、字段属性、元数据选项等设置的相关说明，不清楚的读者可以稍后查看对应的参考指南。</p></blockquote></li><li><p>通过模型创建数据表。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">(venv)$</span><span class="bash"> <span class="built_in">cd</span> ..</span></span><br><span class="line"><span class="meta">(venv)$</span><span class="bash"> python manage.py makemigrations hrs</span></span><br><span class="line">Migrations for 'hrs':</span><br><span class="line">  hrs/migrations/0001_initial.py</span><br><span class="line">    - Create model Dept</span><br><span class="line">    - Create model Emp</span><br><span class="line"><span class="meta">(venv)$</span><span class="bash"> python manage.py migrate</span></span><br><span class="line">Operations to perform:</span><br><span class="line">  Apply all migrations: admin, auth, contenttypes, hrs, sessions</span><br><span class="line">Running migrations:</span><br><span class="line">  Applying hrs.0001_initial... OK</span><br></pre></td></tr></table></figure><p>执行完数据迁移操作之后，可以在通过图形化的MySQL客户端工具查看到E-R图（实体关系图）。</p><p><img src="..\img\django\er-graph.png" alt=""></p></li></ol><h3 id="在后台管理模型"><a href="#在后台管理模型" class="headerlink" title="在后台管理模型"></a>在后台管理模型</h3><ol><li><p>创建超级管理员账号。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">(venv)$</span><span class="bash"> python manage.py createsuperuser</span></span><br><span class="line">Username (leave blank to use 'hao'): jackfrued</span><br><span class="line">Email address: jackfrued@126.com</span><br><span class="line">Password: </span><br><span class="line">Password (again): </span><br><span class="line">Superuser created successfully.</span><br></pre></td></tr></table></figure></li><li><p>启动Web服务器，登录后台管理系统。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">(venv)$</span><span class="bash"> python manage.py runserver</span></span><br></pre></td></tr></table></figure><p>访问<a href="http://127.0.0.1:8000/admin" target="_blank" rel="noopener">http://127.0.0.1:8000/admin</a>，会来到如下图所示的登录界面。</p><p><img src="..\img\django\admin-login.png" alt=""></p><p>登录后进入管理员操作平台。</p><p><img src="..\img\django\admin-welcome.png" alt=""></p><p>至此我们还没有看到之前创建的模型类，需要在应用的admin.py文件中模型进行注册。</p></li><li><p>注册模型类。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">(venv)$</span><span class="bash"> <span class="built_in">cd</span> hrs</span></span><br><span class="line"><span class="meta">(venv)$</span><span class="bash"> vim admin.py</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> hrs.models <span class="keyword">import</span> Emp, Dept</span><br><span class="line"></span><br><span class="line">admin.site.register(Dept)</span><br><span class="line">admin.site.register(Emp)</span><br></pre></td></tr></table></figure><p>注册模型类后，就可以在后台管理系统中看到它们。</p><p><img src="..\img\django\admin-model.png" alt=""></p></li><li><p>对模型进行CRUD操作。</p><p>可以在管理员平台对模型进行C（新增）R（查看）U（更新）D（删除）操作，如下图所示。</p><p>添加新的部门。</p><p><img src="..\img\django\admin-model-create-g.png" alt=""></p><p>查看所有部门。</p><p><img src="..\img\django\admin-model-read-g.png" alt=""></p><p>更新和删除部门。</p><p><img src="..\img\django\admin-model-delete-and-update.png" alt=""></p></li><li><p>注册模型管理类。</p><p>再次修改admin.py文件，通过注册模型管理类，可以在后台管理系统中更好的管理模型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> hrs.models <span class="keyword">import</span> Emp, Dept</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DeptAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line"></span><br><span class="line">    list_display = (<span class="string">'no'</span>, <span class="string">'name'</span>, <span class="string">'location'</span>)</span><br><span class="line">    ordering = (<span class="string">'no'</span>, )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmpAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line"></span><br><span class="line">    list_display = (<span class="string">'no'</span>, <span class="string">'name'</span>, <span class="string">'job'</span>, <span class="string">'mgr'</span>, <span class="string">'sal'</span>, <span class="string">'comm'</span>, <span class="string">'dept'</span>)</span><br><span class="line">    search_fields = (<span class="string">'name'</span>, <span class="string">'job'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">admin.site.register(Dept, DeptAdmin)</span><br><span class="line">admin.site.register(Emp, EmpAdmin)</span><br></pre></td></tr></table></figure><p><img src="..\img\django\admin-model-depts.png" alt=""></p><p><img src="..\img\django\admin-model-emps.png" alt=""></p><p>为了更好的查看模型数据，可以为Dept和Emp两个模型类添加<code>__str__</code>魔法方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dept</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""部门类"""</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 此处省略上面的代码</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 此处省略下面的代码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Emp</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""员工类"""</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 此处省略上面的代码</span></span><br><span class="line">    </span><br><span class="line">    mgr = models.ForeignKey(<span class="string">'self'</span>, on_delete=models.SET_NULL, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>, verbose_name=<span class="string">'直接主管'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 此处省略下面的代码</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 此处省略上面的代码</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 此处省略下面的代码</span></span><br></pre></td></tr></table></figure><p>修改代码后刷新查看Emp模型的页面，效果如下图所示。</p><p><img src="..\img\django\admin-model-emps-modified.png" alt=""></p></li></ol><h3 id="使用ORM完成模型的CRUD操作"><a href="#使用ORM完成模型的CRUD操作" class="headerlink" title="使用ORM完成模型的CRUD操作"></a>使用ORM完成模型的CRUD操作</h3><p>在了解了Django提供的模型管理平台之后，我们来看看如何从代码层面完成对模型的CRUD（Create / Read / Update / Delete）操作。我们可以通过manage.py开启Shell交互式环境，然后使用Django内置的ORM框架对模型进行CRUD操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">(venv)$</span><span class="bash"> <span class="built_in">cd</span> ..</span></span><br><span class="line"><span class="meta">(venv)$</span><span class="bash"> python manage.py shell</span></span><br><span class="line">Python 3.6.4 (v3.6.4:d48ecebad5, Dec 18 2017, 21:07:28) </span><br><span class="line">[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin</span><br><span class="line">Type "help", "copyright", "credits" or "license" for more information.</span><br><span class="line">(InteractiveConsole)</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;</span></span><br></pre></td></tr></table></figure><h4 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; from hrs.models import Dept, Emp</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; dept = Dept(40, <span class="string">'研发2部'</span>, <span class="string">'深圳'</span>)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; dept.save()</span></span><br></pre></td></tr></table></figure><h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; dept.name = <span class="string">'研发3部'</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; dept.save()</span></span><br></pre></td></tr></table></figure><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><p>查询所有对象。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Dept.objects.all()</span></span><br><span class="line">&lt;QuerySet [&lt;Dept: 研发1部&gt;, &lt;Dept: 销售1部&gt;, &lt;Dept: 运维1部&gt;, &lt;Dept: 研发3部&gt;]&gt;</span><br></pre></td></tr></table></figure><p>过滤数据。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Dept.objects.filter(name=<span class="string">'研发3部'</span>) <span class="comment"># 查询部门名称为“研发3部”的部门</span></span></span><br><span class="line">&lt;QuerySet [&lt;Dept: 研发3部&gt;]&gt;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Dept.objects.filter(name__contains=<span class="string">'研发'</span>) <span class="comment"># 查询部门名称包含“研发”的部门(模糊查询)</span></span></span><br><span class="line">&lt;QuerySet [&lt;Dept: 研发1部&gt;, &lt;Dept: 研发3部&gt;]&gt;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Dept.objects.filter(no__gt=10).filter(no__lt=40) <span class="comment"># 查询部门编号大于10小于40的部门</span></span></span><br><span class="line">&lt;QuerySet [&lt;Dept: 销售1部&gt;, &lt;Dept: 运维1部&gt;]&gt;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Dept.objects.filter(no__range=(10, 30)) <span class="comment"># 查询部门编号在10到30之间的部门</span></span></span><br><span class="line">&lt;QuerySet [&lt;Dept: 研发1部&gt;, &lt;Dept: 销售1部&gt;, &lt;Dept: 运维1部&gt;]&gt;</span><br></pre></td></tr></table></figure><p>查询单个对象。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Dept.objects.get(pk=10)</span></span><br><span class="line">&lt;Dept: 研发1部&gt;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Dept.objects.get(no=20)</span></span><br><span class="line">&lt;Dept: 销售1部&gt;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Dept.objects.get(no__exact=30)</span></span><br><span class="line">&lt;Dept: 运维1部&gt;</span><br></pre></td></tr></table></figure><p>排序数据。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Dept.objects.order_by(<span class="string">'no'</span>) <span class="comment"># 查询所有部门按部门编号升序排列</span></span></span><br><span class="line">&lt;QuerySet [&lt;Dept: 研发1部&gt;, &lt;Dept: 销售1部&gt;, &lt;Dept: 运维1部&gt;, &lt;Dept: 研发3部&gt;]&gt;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Dept.objects.order_by(<span class="string">'-no'</span>) <span class="comment"># 查询所有部门按部门编号降序排列</span></span></span><br><span class="line">&lt;QuerySet [&lt;Dept: 研发3部&gt;, &lt;Dept: 运维1部&gt;, &lt;Dept: 销售1部&gt;, &lt;Dept: 研发1部&gt;]&gt;</span><br></pre></td></tr></table></figure><p>切片数据。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Dept.objects.order_by(<span class="string">'no'</span>)[0:2] <span class="comment"># 按部门编号排序查询1~2部门</span></span></span><br><span class="line">&lt;QuerySet [&lt;Dept: 研发1部&gt;, &lt;Dept: 销售1部&gt;]&gt;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Dept.objects.order_by(<span class="string">'no'</span>)[2:4] <span class="comment"># 按部门编号排序查询3~4部门</span></span></span><br><span class="line">&lt;QuerySet [&lt;Dept: 运维1部&gt;, &lt;Dept: 研发3部&gt;]&gt;</span><br></pre></td></tr></table></figure><p>高级查询。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Emp.objects.filter(dept__no=10) <span class="comment"># 根据部门编号查询该部门的员工</span></span></span><br><span class="line">&lt;QuerySet [&lt;Emp: 乔峰&gt;, &lt;Emp: 张无忌&gt;, &lt;Emp: 张三丰&gt;]&gt;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Emp.objects.filter(dept__name__contains=<span class="string">'销售'</span>) <span class="comment"># 查询名字包含“销售”的部门的员工</span></span></span><br><span class="line">&lt;QuerySet [&lt;Emp: 黄蓉&gt;]&gt;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Dept.objects.get(pk=10).emp_set.all() <span class="comment"># 通过部门反查部门所有的员工</span></span></span><br><span class="line">&lt;QuerySet [&lt;Emp: 乔峰&gt;, &lt;Emp: 张无忌&gt;, &lt;Emp: 张三丰&gt;]&gt;</span><br></pre></td></tr></table></figure><blockquote><p>说明1：由于员工与部门之间存在多对一外键关联，所以也能通过部门反向查询该部门的员工（从一对多关系中“一”的一方查询“多”的一方），反向查询属性默认的名字是<code>类名小写_set</code>（如上面例子中的<code>emp_set</code>），当然也可以在创建模型时通过<code>ForeingKey</code>的<code>related_name</code>属性指定反向查询属性的名字。如果不希望执行反向查询可以将<code>related_name</code>属性设置为<code>&#39;+&#39;</code>或以<code>&#39;+&#39;</code>开头的字符串。</p><p>说明2：查询多个对象的时候返回的是QuerySet对象，QuerySet使用了惰性查询，即在创建QuerySet对象的过程中不涉及任何数据库活动，等真正用到对象时（求值QuerySet）才向数据库发送SQL语句并获取对应的结果，这一点在实际开发中需要引起注意！</p><p>说明3：可以在QuerySet上使用<code>update()</code>方法一次更新多个对象。</p></blockquote><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Dept.objects.get(pk=40).delete()</span></span><br><span class="line">(1, &#123;'hrs.Dept': 1&#125;)</span><br></pre></td></tr></table></figure><h3 id="Django模型最佳实践"><a href="#Django模型最佳实践" class="headerlink" title="Django模型最佳实践"></a>Django模型最佳实践</h3><ol><li>正确的模型命名和关系字段命名。</li><li>设置适当的<code>related_name</code>属性。</li><li>用<code>OneToOneField</code>代替<code>ForeignKeyField(unique=True)</code>。</li><li>通过“迁移操作”（migrate）来添加模型。</li><li>用NoSQL来应对需要降低范式级别的场景。</li><li>如果布尔类型可以为空要使用<code>NullBooleanField</code>。</li><li>在模型中放置业务逻辑。</li><li>用<code>&lt;ModelName&gt;.DoesNotExists</code>取代<code>ObjectDoesNotExists</code>。</li><li>在数据库中不要出现无效数据。</li><li>不要对<code>QuerySet</code>调用<code>len()</code>函数。</li><li>将<code>QuerySet</code>的<code>exists()</code>方法的返回值用于<code>if</code>条件。</li><li>用<code>DecimalField</code>来存储货币相关数据而不是<code>FloatField</code>。</li><li>定义<code>__str__</code>方法。</li><li>不要将数据文件放在同一个目录中。</li></ol><blockquote><p>说明：以上内容来自于STEELKIWI网站的<a href="https://steelkiwi.com/blog/best-practices-working-django-models-python/" target="_blank" rel="noopener"><em>Best Practice working with Django models in Python</em></a>，有兴趣的小伙伴可以阅读原文。</p></blockquote><h3 id="模型定义参考"><a href="#模型定义参考" class="headerlink" title="模型定义参考"></a>模型定义参考</h3><h4 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h4><p>对字段名称的限制</p><ul><li>字段名不能是Python的保留字，否则会导致语法错误</li><li>字段名不能有多个连续下划线，否则影响ORM查询操作</li></ul><p>Django模型字段类</p><table><thead><tr><th>字段类</th><th>说明</th></tr></thead><tbody><tr><td>AutoField</td><td>自增ID字段</td></tr><tr><td>BigIntegerField</td><td>64位有符号整数</td></tr><tr><td>BinaryField</td><td>存储二进制数据的字段，对应Python的bytes类型</td></tr><tr><td>BooleanField</td><td>存储True或False</td></tr><tr><td>CharField</td><td>长度较小的字符串</td></tr><tr><td>DateField</td><td>存储日期，有auto_now和auto_now_add属性</td></tr><tr><td>DateTimeField</td><td>存储日期和日期，两个附加属性同上</td></tr><tr><td>DecimalField</td><td>存储固定精度小数，有max_digits（有效位数）和decimal_places（小数点后面）两个必要的参数</td></tr><tr><td>DurationField</td><td>存储时间跨度</td></tr><tr><td>EmailField</td><td>与CharField相同，可以用EmailValidator验证</td></tr><tr><td>FileField</td><td>文件上传字段</td></tr><tr><td>FloatField</td><td>存储浮点数</td></tr><tr><td>ImageField</td><td>其他同FileFiled，要验证上传的是不是有效图像</td></tr><tr><td>IntegerField</td><td>存储32位有符号整数。</td></tr><tr><td>GenericIPAddressField</td><td>存储IPv4或IPv6地址</td></tr><tr><td>NullBooleanField</td><td>存储True、False或null值</td></tr><tr><td>PositiveIntegerField</td><td>存储无符号整数（只能存储正数）</td></tr><tr><td>SlugField</td><td>存储slug（简短标注）</td></tr><tr><td>SmallIntegerField</td><td>存储16位有符号整数</td></tr><tr><td>TextField</td><td>存储数据量较大的文本</td></tr><tr><td>TimeField</td><td>存储时间</td></tr><tr><td>URLField</td><td>存储URL的CharField</td></tr><tr><td>UUIDField</td><td>存储全局唯一标识符</td></tr></tbody></table><h4 id="字段属性"><a href="#字段属性" class="headerlink" title="字段属性"></a>字段属性</h4><p>通用字段属性</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>null</td><td>数据库中对应的字段是否允许为NULL，默认为False</td></tr><tr><td>blank</td><td>后台模型管理验证数据时，是否允许为NULL，默认为False</td></tr><tr><td>choices</td><td>设定字段的选项，各元组中的第一个值是设置在模型上的值，第二值是人类可读的值</td></tr><tr><td>db_column</td><td>字段对应到数据库表中的列名，未指定时直接使用字段的名称</td></tr><tr><td>db_index</td><td>设置为True时将在该字段创建索引</td></tr><tr><td>db_tablespace</td><td>为有索引的字段设置使用的表空间，默认为DEFAULT_INDEX_TABLESPACE</td></tr><tr><td>default</td><td>字段的默认值</td></tr><tr><td>editable</td><td>字段在后台模型管理或ModelForm中是否显示，默认为True</td></tr><tr><td>error_messages</td><td>设定字段抛出异常时的默认消息的字典，其中的键包括null、blank、invalid、invalid_choice、unique和unique_for_date</td></tr><tr><td>help_text</td><td>表单小组件旁边显示的额外的帮助文本。</td></tr><tr><td>primary_key</td><td>将字段指定为模型的主键，未指定时会自动添加AutoField用于主键，只读。</td></tr><tr><td>unique</td><td>设置为True时，表中字段的值必须是唯一的</td></tr><tr><td>verbose_name</td><td>字段在后台模型管理显示的名称，未指定时使用字段的名称</td></tr></tbody></table><p>ForeignKey属性</p><ol><li>limit_choices_to：值是一个Q对象或返回一个Q对象，用于限制后台显示哪些对象。</li><li>related_name：用于获取关联对象的关联管理器对象（反向查询），如果不允许反向，该属性应该被设置为<code>&#39;+&#39;</code>，或者以<code>&#39;+&#39;</code>结尾。</li><li>to_field：指定关联的字段，默认关联对象的主键字段。</li><li>db_constraint：是否为外键创建约束，默认值为True。</li><li>on_delete：外键关联的对象被删除时对应的动作，可取的值包括django.db.models中定义的：<ul><li>CASCADE：级联删除。</li><li>PROTECT：抛出ProtectedError异常，阻止删除引用的对象。</li><li>SET_NULL：把外键设置为null，当null属性被设置为True时才能这么做。</li><li>SET_DEFAULT：把外键设置为默认值，提供了默认值才能这么做。</li></ul></li></ol><p>ManyToManyField属性</p><ol><li>symmetrical：是否建立对称的多对多关系。</li><li>through：指定维持多对多关系的中间表的Django模型。</li><li>throughfields：定义了中间模型时可以指定建立多对多关系的字段。</li><li>db_table：指定维持多对多关系的中间表的表名。</li></ol><h4 id="模型元数据选项"><a href="#模型元数据选项" class="headerlink" title="模型元数据选项"></a>模型元数据选项</h4><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>abstract</td><td>设置为True时模型是抽象父类</td></tr><tr><td>app_label</td><td>如果定义模型的应用不在INSTALLED_APPS中可以用该属性指定</td></tr><tr><td>db_table</td><td>模型使用的数据表名称</td></tr><tr><td>db_tablespace</td><td>模型使用的数据表空间</td></tr><tr><td>default_related_name</td><td>关联对象回指这个模型时默认使用的名称，默认为<model_name>_set</model_name></td></tr><tr><td>get_latest_by</td><td>模型中可排序字段的名称。</td></tr><tr><td>managed</td><td>设置为True时，Django在迁移中创建数据表并在执行flush管理命令时把表移除</td></tr><tr><td>order_with_respect_to</td><td>标记对象为可排序的</td></tr><tr><td>ordering</td><td>对象的默认排序</td></tr><tr><td>permissions</td><td>创建对象时写入权限表的额外权限</td></tr><tr><td>default_permissions</td><td>默认为<code>(&#39;add&#39;, &#39;change&#39;, &#39;delete&#39;)</code></td></tr><tr><td>unique_together</td><td>设定组合在一起时必须独一无二的字段名</td></tr><tr><td>index_together</td><td>设定一起建立索引的多个字段名</td></tr><tr><td>verbose_name</td><td>为对象设定人类可读的名称</td></tr><tr><td>verbose_name_plural</td><td>设定对象的复数名称</td></tr></tbody></table><h3 id="查询参考"><a href="#查询参考" class="headerlink" title="查询参考"></a>查询参考</h3><p>按字段查找可以用的条件：</p><ol><li>exact / iexact：精确匹配/忽略大小写的精确匹配查询</li><li>contains / icontains / startswith / istartswith / endswith / iendswith：基于<code>like</code>的模糊查询</li><li>in：集合运算</li><li>gt / gte / lt / lte：大于/大于等于/小于/小于等于关系运算</li><li>range：指定范围查询（SQL中的<code>between…and…</code>）</li><li>year / month / day / week_day / hour / minute / second：查询时间日期</li><li>isnull：查询空值（True）或非空值（False）</li><li>search：基于全文索引的全文检索</li><li>regex / iregex：基于正则表达式的模糊匹配查询</li></ol><p>Q对象（用于执行复杂查询）的使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; from django.db.models import Q</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Emp.objects.filter(</span></span><br><span class="line">...     Q(name__startswith='张'),</span><br><span class="line">...     Q(sal__gte=5000) | Q(comm__gte=1000)</span><br><span class="line">... ) # 查询名字以“张”开头 工资大于等于5000或补贴大于等于1000的员工</span><br><span class="line">&lt;QuerySet [&lt;Emp: 张三丰&gt;]&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文档使用Django 2.x，Django是一个基于MVC架构的Web框架，MVC架构要追求的是模型和视图的解耦合，而其中的模型说得更直白一些就是数据，所以通常也被称作数据模型。在实际的项目中，数据模型通常通过数据库实现持久化操作，而关系型数据库在很长一段时间都是持久化的
      
    
    </summary>
    
      <category term="Django" scheme="http://gavinliu4011.github.io/categories/Django/"/>
    
    
      <category term="Django" scheme="http://gavinliu4011.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django(一)</title>
    <link href="http://gavinliu4011.github.io/post/e8c9ba97.html"/>
    <id>http://gavinliu4011.github.io/post/e8c9ba97.html</id>
    <published>2017-10-29T14:41:37.000Z</published>
    <updated>2017-10-29T06:41:50.755Z</updated>
    
    <content type="html"><![CDATA[<p>编写自己的第一个Django应用                                                                                                                                           </p><blockquote><p>创建项目</p></blockquote><ul><li>Windows环境下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### Windows环境下</span></span><br><span class="line"><span class="comment"># 创建根目录也就是你项目的容器</span></span><br><span class="line">$ mkdir mysite</span><br><span class="line"><span class="comment"># 切换到根目录</span></span><br><span class="line">$ <span class="built_in">cd</span> mysite/</span><br><span class="line"><span class="comment"># 建虚拟环境</span></span><br><span class="line">$ python -m venv venv</span><br><span class="line"><span class="comment"># 进入Scripts目录</span></span><br><span class="line">$ <span class="built_in">cd</span> venv</span><br><span class="line">$ <span class="built_in">cd</span> Scripts</span><br><span class="line"><span class="comment"># 激活环境</span></span><br><span class="line">$ activate</span><br><span class="line"><span class="comment"># 在虚拟环境下安装django依赖库</span></span><br><span class="line">(venv)$ pip install django</span><br><span class="line"><span class="comment"># 查看django版本</span></span><br><span class="line">(venv)$ django-admin --version</span><br><span class="line"><span class="comment"># 切换到根目录</span></span><br><span class="line">(venv)$ <span class="built_in">cd</span> ../..</span><br><span class="line"><span class="comment"># 创建项目</span></span><br><span class="line">(venv)$ django-admin startproject mysite .</span><br></pre></td></tr></table></figure><ul><li>Linux和macOS 环境</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Linux和macOS 环境</span></span><br><span class="line"><span class="comment"># 创建项目文件夹</span></span><br><span class="line">$ mkdir mysite</span><br><span class="line"><span class="comment"># 切换到项目目录</span></span><br><span class="line">$ <span class="built_in">cd</span> mysite/</span><br><span class="line"><span class="comment"># 使用venv模块创建虚拟环境，目录名venv</span></span><br><span class="line">$ python3 -m venv venv</span><br><span class="line"><span class="comment"># 激活虚拟环境</span></span><br><span class="line">$ <span class="built_in">source</span> venv/bin/activate</span><br><span class="line"><span class="comment"># 更新pip到最新版本</span></span><br><span class="line">(venv)$ python -m pip install --upgrade pip</span><br><span class="line"><span class="comment"># 使用pip安装django</span></span><br><span class="line">(venv)$ pip install django</span><br><span class="line"><span class="comment"># 通过安装django时安装的脚本工具django-admin检查django版本</span></span><br><span class="line">(venv)$ django-admin --version</span><br><span class="line"><span class="comment"># 开启新项目</span></span><br><span class="line">(venv)$ django-admin startproject mysite .</span><br></pre></td></tr></table></figure><p>好了到现在为止,我们已经创建好了自己的一个Django项目,让我们看看 <a href="https://docs.djangoproject.com/zh-hans/2.0/ref/django-admin/#django-admin-startproject" target="_blank" rel="noopener">startproject</a> 创建了些什么:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysite/</span><br><span class="line">    manage.py</span><br><span class="line">    mysite/</span><br><span class="line">        __init__.py</span><br><span class="line">        settings.py</span><br><span class="line">        urls.py</span><br><span class="line">        wsgi.py</span><br></pre></td></tr></table></figure><p>下面我们简单的介绍上面每个文件是什么有什么作用</p><ul><li><code>manage.py</code>:用各种方式管理 Django 项目的命令行工具</li><li><code>__init__.py</code>:一个空文件，告诉 Python 这个目录应该被认为是一个 Python 包</li><li><code>settings.py</code>:整个Django 项目的配置文件</li><li><code>urls.py</code>:就像是地图,负责把URL模式映射到应用程序</li><li><code>wsgi.py</code>:用于项目部署</li></ul><blockquote><p>启动服务器</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(venv)$ python manage.py runserver</span><br></pre></td></tr></table></figure><p>你刚刚启动的是 Django 自带的用于开发的简易服务器，它是一个用纯 Python 写的轻量级的 Web 服务器。</p><p>现在我们用浏览器访问以下<a href="https://127.0.0.1:8000/" target="_blank" rel="noopener">https://127.0.0.1:8000/</a>，如果看到了小火箭那么恭喜你已经成功访问项目</p><p>Django默认端口是8000，如果你想更换服务器的监听端口，那么请运行<code>python manage.py runserver 8080</code>,如果你想在本地访问你服务器上的项目那么你需要执行<code>python manage.py runserver 0:8000</code>,<code>python manage.py runserver 0.0.0.0:8000</code>,这里的<strong>0</strong>相当于<strong>0.0.0.0</strong></p><blockquote><p>创建应用</p></blockquote><p>一个项目下我们可以有多个应用,现在我们来创建自己的第一个应用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(venv)$ python manage.py startapp hrs</span><br></pre></td></tr></table></figure><p>下面我们来看看<code>startapp</code>命令创建了些什么:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">hrs/</span><br><span class="line">    __init__.py</span><br><span class="line">    admin.py</span><br><span class="line">    apps.py</span><br><span class="line">    migrations/</span><br><span class="line">        __init__.py</span><br><span class="line">    models.py</span><br><span class="line">    tests.py</span><br><span class="line">    views.py</span><br></pre></td></tr></table></figure><ul><li><code>__init__.py</code>: 一个空文件,告诉Python这个目录应该被认为是一个包</li><li><code>admin.py</code>: 可以用来注册模型,让Django自动创建管理界面</li><li><code>apps.py</code>: 当前应用的配置</li><li><code>migrations</code>: 存放与模型有关的数据库信息<ul><li><code>__init__.py</code>: 也是一个空文件,告诉Python这个目录应该被认为是一个包</li></ul></li><li><code>models.py</code>:存放应用的数据模型,即实体类及其之间的关系(MVC/MVT中的M)</li><li><code>tests.py</code>: 测试应用的各种测试函数</li><li><code>views.py</code>: 处理请求并返回响应的函数(MVC中的C,MVT中的V)</li></ul><blockquote><p>创建一个视图</p></blockquote><p>hrs/views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">(request)</span>:</span>    </span><br><span class="line"><span class="keyword">return</span> HttpResponse(<span class="string">'&lt;h1&gt;Hello, Django!&lt;/h1&gt;'</span>)</span><br></pre></td></tr></table></figure><p>完成后,到项目目录,修改该目录下的urls.py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> hrs <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'hrs/'</span>, views.home),</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>注意:我们还可以为应用单独建立一个urls.py文件来映射请求的URL,如下面:</p></blockquote><p>在hrs引用下创建一个urls.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> hrs <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, views.home, name=<span class="string">'index'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>那么相应的我们在项目的urls.py文件中应当做出改变:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'hrs/'</span>, include(<span class="string">'hrs.urls'</span>)),</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>使用视图模板</p></blockquote><p>在manage.py所在的同级目录下创建一个templates文件夹</p><p>接下来便是创建一个个模板页面,在这里我创建一个index.html模板页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; greeting &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; current_time &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    今天为你推荐&#123;&#123; num &#125;&#125;种水果:</span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        &#123;% for fruit in fruits %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; fruit &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>要使用模板我们要改相应的配置,切换到配置文件目录找到setting.py文件</p><p>我们需要修改<code>TEMPLATES</code>的配置,代码如下所示:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'BACKEND'</span>: <span class="string">'django.template.backends.django.DjangoTemplates'</span>,</span><br><span class="line">        <span class="string">'DIRS'</span>: [os.path.join(BASE_DIR, <span class="string">'templates'</span>)],  <span class="comment"># 将DIRS路径配置成模板页面所在的路径</span></span><br><span class="line">        <span class="string">'APP_DIRS'</span>: <span class="keyword">True</span>,</span><br><span class="line">        <span class="string">'OPTIONS'</span>: &#123;</span><br><span class="line">            <span class="string">'context_processors'</span>: [</span><br><span class="line">                <span class="string">'django.template.context_processors.debug'</span>,</span><br><span class="line">                <span class="string">'django.template.context_processors.request'</span>,</span><br><span class="line">                <span class="string">'django.contrib.auth.context_processors.auth'</span>,</span><br><span class="line">                <span class="string">'django.contrib.messages.context_processors.messages'</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>要渲染模板我们需要在views.py中传递参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">(req)</span>:</span></span><br><span class="line">    fruit = [<span class="string">'大苹果'</span>, <span class="string">'水晶葡萄'</span>, <span class="string">'大西瓜'</span>, <span class="string">'石榴'</span>, <span class="string">'桃子'</span>, <span class="string">'李子'</span>, <span class="string">'梨子'</span>]</span><br><span class="line">    len_f = randrange(<span class="number">1</span>, len(fruit))</span><br><span class="line">    fruits = set()</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(len_f):</span><br><span class="line">        index = randrange(<span class="number">0</span>, len(fruit))</span><br><span class="line">        fruits.add(fruit[index])</span><br><span class="line"></span><br><span class="line">    ctx = &#123;</span><br><span class="line">        <span class="string">'greeting'</span>: <span class="string">'你好,世界'</span>,</span><br><span class="line">        <span class="string">'current_time'</span>: datetime.now,</span><br><span class="line">        <span class="string">'num'</span>: len(fruits),</span><br><span class="line">        <span class="string">'fruits'</span>: fruits,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(req, <span class="string">'index.html'</span>, ctx)</span><br></pre></td></tr></table></figure><p>到这里我们完成了一个简单的Django项目,现在我们将项目重新运行查看一下结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(venv)$ python manage.py runserver 0:8000</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;编写自己的第一个Django应用                                                                                                                         
      
    
    </summary>
    
      <category term="Django" scheme="http://gavinliu4011.github.io/categories/Django/"/>
    
    
      <category term="Django" scheme="http://gavinliu4011.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Python3.x 连接MySQL数据库</title>
    <link href="http://gavinliu4011.github.io/post/64b3833f.html"/>
    <id>http://gavinliu4011.github.io/post/64b3833f.html</id>
    <published>2017-10-12T09:29:05.000Z</published>
    <updated>2017-10-12T01:29:22.908Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Python3-x-连接MySQL数据库"><a href="#Python3-x-连接MySQL数据库" class="headerlink" title="Python3.x 连接MySQL数据库"></a>Python3.x 连接MySQL数据库</h3><p>由于 MySQLdb 模块还不支持 Python3.x，所以 Python3.x 如果想连接MySQL需要安装 pymysql 模块。</p><p>pymysql 模块可以通过 pip 安装<code>pip install PyMySQL</code></p><blockquote><p>用pymysql连接数据库</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">conn = pymysql.connect(host=<span class="string">'localhost'</span>,</span><br><span class="line">                           port=<span class="number">3306</span>,</span><br><span class="line">                           user=<span class="string">'root'</span>,</span><br><span class="line">                           password=<span class="string">'root'</span>,</span><br><span class="line">                           db=<span class="string">'hrs'</span>,</span><br><span class="line">                           charset=<span class="string">'utf8'</span>,</span><br><span class="line">                           autocommit=<span class="keyword">False</span>  <span class="comment"># 默认不自动提交</span></span><br><span class="line">                           )</span><br></pre></td></tr></table></figure><ul><li><p>常用参数说明:</p><p>​<code>host</code>:主机IP</p><p>​<code>port</code>:端口号</p><p>​<code>user</code>:mysql登录用户名</p><p>​<code>password</code>:mysql登录密码</p><p>​<code>db</code>:数据库名称</p><p>​<code>charset</code>:连接数据库采用的字符编码</p><p><code>autocommit</code>:默认值是False,DML(数据操纵语言)不会自动提交,如果为True则会自动提交</p><p><code>cursorclass</code>:pymysql.cursors.DictCursor - 设置游标的类型,查询返回的结果是以字典的方式</p></li><li><p>测试是否连接成功</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(conn)</span><br><span class="line">$ &lt;pymysql.connections.Connection object at <span class="number">0x05656EB0</span>&gt;</span><br></pre></td></tr></table></figure></li></ul><p>如果运行上面的语句不报错,并且看到了输出到控制台的值,那么我们则用pymysql连接上了MySQL数据库.</p><blockquote><p>方法介绍</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">connection对象常用的方法</span><br><span class="line">cursor()        使用该连接创建并返回游标</span><br><span class="line">commit()        提交当前事务</span><br><span class="line">rollback()      回滚当前事务</span><br><span class="line">close()         关闭连接</span><br><span class="line"></span><br><span class="line">cursor对象常用的方法和属性</span><br><span class="line">execute(sql)    执行一个数据库的查询命令</span><br><span class="line">fetchone()      取得结果集的下一行</span><br><span class="line">fetchmany(size) 获取结果集的下几行</span><br><span class="line">fetchall()      获取结果集中的所有行</span><br><span class="line">rowcount      返回数据条数或影响行数</span><br><span class="line">close()         关闭游标对象</span><br></pre></td></tr></table></figure><p>在介绍上面方法使用前再看看连接数据库的代码块,其中有一个很重要的参数<strong>db</strong> (数据库名称),所以我们应当在连接数据库之前，先创建一个数据库，方便测试 pymysql 的功能</p><blockquote><p>使用Python实现增删改查和事务处理</p></blockquote><p>首先我们在上面说的<code>hrs</code>数据库中创建一张部门表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建部门表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tbdept</span><br><span class="line">(</span><br><span class="line">dno <span class="built_in">int</span>,<span class="comment">-- 部门编号</span></span><br><span class="line">dname <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span>,  <span class="comment">-- 部门名称</span></span><br><span class="line">dloc <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,  <span class="comment">-- 部门所在地</span></span><br><span class="line">primary <span class="keyword">key</span> (dno)</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 添加部门记录</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tbdept <span class="keyword">values</span> </span><br><span class="line">(<span class="number">10</span>, <span class="string">'会计部'</span>, <span class="string">'北京'</span>),</span><br><span class="line">(<span class="number">20</span>, <span class="string">'研发部'</span>, <span class="string">'成都'</span>),</span><br><span class="line">(<span class="number">30</span>, <span class="string">'销售部'</span>, <span class="string">'重庆'</span>),</span><br><span class="line">(<span class="number">40</span>, <span class="string">'运维部'</span>, <span class="string">'深圳'</span>);</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_conn</span><span class="params">()</span>:</span></span><br><span class="line">    config = &#123;</span><br><span class="line">        <span class="string">'host'</span>: <span class="string">'localhost'</span>,</span><br><span class="line">        <span class="string">'port'</span>: <span class="number">3306</span>,</span><br><span class="line">        <span class="string">'user'</span>: <span class="string">'root'</span>,</span><br><span class="line">        <span class="string">'password'</span>: <span class="string">'root'</span>,</span><br><span class="line">        <span class="string">'db'</span>: <span class="string">'hrs'</span>,</span><br><span class="line">        <span class="string">'charset'</span>: <span class="string">'utf8'</span>,</span><br><span class="line">        <span class="string">'autocommit'</span>: <span class="keyword">False</span>,  <span class="comment"># 默认不自动提交</span></span><br><span class="line">        <span class="string">'cursorclass'</span>: pymysql.cursors.DictCursor  <span class="comment"># 设置游标的类型,查询返回的结果是以字典的方式</span></span><br><span class="line">    &#125;</span><br><span class="line">    conn = pymysql.connect(**config)</span><br><span class="line">    <span class="keyword">return</span> conn</span><br></pre></td></tr></table></figure><ul><li><p>下面我们先来看看添加的操作:</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    插入</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># Connection(连接) / Cursor(游标)</span></span><br><span class="line">    conn = get_conn()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 创建Cursor对象,cursor支持上下文语法,可以放在with中</span></span><br><span class="line">        <span class="keyword">with</span> conn.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">            <span class="comment"># 向数据库发出sql语句</span></span><br><span class="line">            dno = input(<span class="string">'部门编号:'</span>)</span><br><span class="line">            dname = input(<span class="string">'部门名称:'</span>)</span><br><span class="line">            dloc = input(<span class="string">'部门地址:'</span>)</span><br><span class="line">            <span class="comment"># 如果使用字符串格式化的方式来组装SQL语句</span></span><br><span class="line">            <span class="comment"># 最大的风险是用被SQL注射攻击</span></span><br><span class="line">            <span class="comment"># sql = "insert into tbdept values (%d, '%s', '%s')" % (dno, dname, dloc)</span></span><br><span class="line">            <span class="comment"># result = cursor.execute(sql)</span></span><br><span class="line">            <span class="comment"># result = cursor.execute('insert into tbdept values (%s, %s, %s)', (dno, dname, dloc))</span></span><br><span class="line">            <span class="comment"># 这个方式传参是以字典的方式,但是要注意的是在占位的时候用%(name)s</span></span><br><span class="line">            result = cursor.execute(</span><br><span class="line">                <span class="string">'insert into tbdept values (%(dno)s, %(dname)s, %(dloc)s)'</span>,</span><br><span class="line">                &#123;<span class="string">'dno'</span>: dno, <span class="string">'dname'</span>: dname, <span class="string">'dloc'</span>: dloc&#125;</span><br><span class="line">            )</span><br><span class="line">            <span class="comment"># print('成功插入', cursor.rowcount, '条数据') # 这里cursor.rowcount是获取到受影响的行</span></span><br><span class="line">            print(<span class="string">'成功插入'</span>, result, <span class="string">'条数据'</span>)</span><br><span class="line">            conn.commit()</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        conn.close()</span><br></pre></td></tr></table></figure></li><li><p>修改操作</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    修改</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    conn = get_conn()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> conn.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">            dno = input(<span class="string">'部门编号:'</span>)</span><br><span class="line">            dname = input(<span class="string">'部门名称:'</span>)</span><br><span class="line">            <span class="comment"># 这个方式传参是以字典的方式,但是要注意的是在占位的时候用%(name)s</span></span><br><span class="line">            result = cursor.execute(</span><br><span class="line">                <span class="string">'update tbdept set dname=%(dname)s where dno=%(dno)s'</span>,</span><br><span class="line">                &#123;<span class="string">'dno'</span>: dno, <span class="string">'dname'</span>: dname&#125;</span><br><span class="line">            )</span><br><span class="line">            <span class="comment"># print('成功插入', cursor.rowcount, '条数据') # 这里cursor.rowcount是获取到受影响的行</span></span><br><span class="line">            print(<span class="string">'成功修改'</span>, result, <span class="string">'条数据'</span>)</span><br><span class="line">            conn.commit()</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        conn.close()</span><br></pre></td></tr></table></figure></li><li><p>删除操作</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(dno)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    根据编号删除</span></span><br><span class="line"><span class="string">    :param dno: 编号</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    conn = get_conn()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> conn.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">            <span class="comment"># 向数据库发出sql语句</span></span><br><span class="line">            <span class="comment"># execute方法中占位后传参除了元组和字典外,还可以是列表</span></span><br><span class="line">            result = cursor.execute(<span class="string">'delete from tbdept where dno=%s'</span>, [dno])</span><br><span class="line">            <span class="comment"># 如果事务中的所有操作全部成功了最后手动提交</span></span><br><span class="line">            conn.commit()</span><br><span class="line">            print(<span class="string">'删除成功'</span> <span class="keyword">if</span> result == <span class="number">1</span> <span class="keyword">else</span> <span class="string">'删除失败'</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">        <span class="comment"># 如果事务操作有任何一个操作发生异常,那么就会回滚事务</span></span><br><span class="line">        conn.rollback()</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        conn.close()</span><br></pre></td></tr></table></figure></li><li><p>查询操作</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    查询</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    conn = get_conn()</span><br><span class="line">    print(conn)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 创建Cursor对象</span></span><br><span class="line">        <span class="keyword">with</span> conn.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">            <span class="comment"># 向数据库发出sql语句</span></span><br><span class="line">            cursor.execute(<span class="string">'select dno, dname, dloc from tbdept'</span>)</span><br><span class="line">            result = cursor.fetchone()</span><br><span class="line">            <span class="comment"># 程序中最好不要使用fetchall(),如果库中数据量很大,那么脑补一下会有什么样的结果呢</span></span><br><span class="line">            <span class="keyword">while</span> result:</span><br><span class="line">                print(result)</span><br><span class="line">                <span class="comment"># 取出部门名称</span></span><br><span class="line">                <span class="comment"># 在这里我上面连接数据时,使用了cursorclass参数,查询时返回的结果是以字典的方式</span></span><br><span class="line">                print(result[<span class="string">'dname'</span>])</span><br><span class="line">                result = cursor.fetchone()</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        conn.close()</span><br></pre></td></tr></table></figure></li></ul><p>到现在我们已经简单的介绍了用pymysql完成了对数据库的CURD操作</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Python3-x-连接MySQL数据库&quot;&gt;&lt;a href=&quot;#Python3-x-连接MySQL数据库&quot; class=&quot;headerlink&quot; title=&quot;Python3.x 连接MySQL数据库&quot;&gt;&lt;/a&gt;Python3.x 连接MySQL数据库&lt;/h3&gt;&lt;
      
    
    </summary>
    
      <category term="Python" scheme="http://gavinliu4011.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://gavinliu4011.github.io/tags/Python/"/>
    
      <category term="pymysql" scheme="http://gavinliu4011.github.io/tags/pymysql/"/>
    
      <category term="MySQL" scheme="http://gavinliu4011.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Linux环境下Git安装与使用</title>
    <link href="http://gavinliu4011.github.io/post/9fdd7050.html"/>
    <id>http://gavinliu4011.github.io/post/9fdd7050.html</id>
    <published>2017-08-27T18:12:06.000Z</published>
    <updated>2017-08-27T10:12:21.308Z</updated>
    
    <content type="html"><![CDATA[<p>Linux环境下Git安装和使用                                                                                                                                            </p><h3 id="Linux环境下Git安装与使用"><a href="#Linux环境下Git安装与使用" class="headerlink" title="Linux环境下Git安装与使用"></a>Linux环境下Git安装与使用</h3><blockquote><p>安装</p></blockquote><ol><li><p>官网下载并解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_11_centos ~]# wget https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.17.0.tar.gz</span><br><span class="line">[root@VM_0_11_centos ~]# tar -xvf git-2.17.0.tar.gz</span><br><span class="line">[root@VM_0_11_centos ~]# cd git-2.17.0</span><br></pre></td></tr></table></figure></li><li><p>移除旧版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_11_centos ~]# yum remove git</span><br></pre></td></tr></table></figure></li><li><p>安装依赖库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_11_centos ~]# yum install libcurl-devel</span><br><span class="line">[root@VM_0_11_centos ~]# yum install  autoconf automake libtool</span><br></pre></td></tr></table></figure></li><li><p>执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_11_centos ~]# make configure</span><br><span class="line">GIT_VERSION = 2.17.0</span><br><span class="line">    GEN configure</span><br><span class="line">[root@VM_0_11_centos ~]# ./configure --prefix=/usr/local/git --with-iconv =/usr/local/lib（建议优先尝试后者）</span><br><span class="line">或者</span><br><span class="line">./configure --prefix=/usr/local/git --with-iconv --with-curl --with-expat=/usr/local/lib（如果没有安装libiconv请自行安装）</span><br><span class="line">[root@VM_0_11_centos git-2.17.0]# make &amp;&amp; make install</span><br></pre></td></tr></table></figure></li><li><p>配置环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_11_centos git-2.17.0]# vim ~/.bash_profile</span><br><span class="line">在文件末尾追加上下面命令:</span><br><span class="line">PATH=$PATH:/usr/local/git/bin</span><br><span class="line">export PATH</span><br></pre></td></tr></table></figure></li><li><p>重新加载环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_11_centos git-2.17.0]# source ~/.bash_profile</span><br></pre></td></tr></table></figure></li><li><p>查看git版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_11_centos git-2.17.0]# git --version</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>使用</p></blockquote><ol><li><p>在本地建立本地仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_11_centos ~]# mkdir test</span><br><span class="line">[root@VM_0_11_centos test]# cd test</span><br><span class="line">[root@VM_0_11_centos test]# git init</span><br></pre></td></tr></table></figure></li><li><p>把文件纳入版本控制(加入暂存区)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_11_centos test]# git add &lt;filename&gt; # 将修改后的文件加入暂存区</span><br><span class="line">[root@VM_0_11_centos test]# git add . # add后跟.是将当前文件夹下面的所有文件及文件夹都加入暂存区</span><br></pre></td></tr></table></figure></li><li><p>提交到仓库(-m 后是描述)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_11_centos test]# git commit -m '本次提交文件的相关描述信息'</span><br></pre></td></tr></table></figure><p>如果提交报错,看否是缺少<code>user.name</code>、<code>user.email</code>,可执行下面的命令解决:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_11_centos test]# git config --global user.name 'your-name'</span><br><span class="line">[root@VM_0_11_centos test]# git config --global user.email 'your-email'</span><br></pre></td></tr></table></figure></li><li><p>查看放入暂存区的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_11_centos test]# git status</span><br></pre></td></tr></table></figure></li><li><p>查看版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_11_centos test]# git log</span><br></pre></td></tr></table></figure></li><li><p>回滚到某个版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_11_centos test]# git reset --hard 版本号</span><br></pre></td></tr></table></figure></li><li><p>显示版本包括历史版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_11_centos test]# git reflog</span><br><span class="line">[root@VM_0_11_centos test]# git reflog --pretty=oneline # 单行显示</span><br></pre></td></tr></table></figure></li><li><p>把暂存区的内容全撤回来(可以在本地做修改,然后再次add进暂存区做提交)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_11_centos test]# git checkout -- [可跟上文件名]</span><br></pre></td></tr></table></figure></li><li><p>添加远端仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_11_centos test]# git remote add origin https://git.coding.net/gavinliu/test.git</span><br></pre></td></tr></table></figure></li><li><p>将本地仓库和远端仓库同步</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_11_centos test]# git push -u origin master</span><br></pre></td></tr></table></figure></li><li><p>创建分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_11_centos test]# git branch [分支名]</span><br></pre></td></tr></table></figure></li><li><p>查看所有分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_11_centos test]# git branch</span><br></pre></td></tr></table></figure></li><li><p>切换分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_11_centos test]# git checkout [分支名]</span><br></pre></td></tr></table></figure></li><li><p>删除文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_11_centos test]# git rm [filename]</span><br></pre></td></tr></table></figure></li><li><p>合并分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_11_centos test]# git merge [分支名]</span><br></pre></td></tr></table></figure></li><li><p>克隆项目到本地</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_11_centos ~]# git clone https://git.coding.net/jackfrued/HelloGit.git</span><br></pre></td></tr></table></figure></li><li><p>推送到服务器,origin是原始名字,master是分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_11_centos test]# git push origin master</span><br></pre></td></tr></table></figure></li><li><p>拉取服务器代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_11_centos test]# git pull</span><br></pre></td></tr></table></figure><p>​</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Linux环境下Git安装和使用                                                                                                                         
      
    
    </summary>
    
      <category term="Git" scheme="http://gavinliu4011.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="http://gavinliu4011.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Shell常用命令</title>
    <link href="http://gavinliu4011.github.io/post/cdf8534a.html"/>
    <id>http://gavinliu4011.github.io/post/cdf8534a.html</id>
    <published>2017-08-13T20:13:40.000Z</published>
    <updated>2017-08-13T12:13:50.025Z</updated>
    
    <content type="html"><![CDATA[<p>shell的基本常用命令                                                                                                                                                            </p><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><blockquote><p><strong>常用操作</strong></p></blockquote><table><thead><tr><th>指令</th><th>操作</th></tr></thead><tbody><tr><td>pwd</td><td>当前路径</td></tr><tr><td>cd</td><td>更改目录 不加参数 进入主目录</td></tr><tr><td>ls</td><td>当前目录内容</td></tr><tr><td>ls -a</td><td>查看隐藏文件</td></tr><tr><td>ls -l</td><td>文件详情</td></tr><tr><td>ls -ld</td><td>目录本身信息</td></tr><tr><td>mkdir</td><td>新建文件夹</td></tr><tr><td>rm</td><td>删除文件</td></tr><tr><td>rm -rf dir/</td><td>删除文件夹</td></tr><tr><td>cp file1 file2</td><td>复制文件</td></tr><tr><td>cp -r dir1 dir2</td><td>复制文件夹</td></tr><tr><td>mv file ..</td><td>移动文件到上一级</td></tr><tr><td>mv file dir/</td><td>移动到dir目录</td></tr><tr><td>mv file1 file2</td><td>替换文件</td></tr><tr><td>mv dir1 dir2</td><td>替换文件夹</td></tr><tr><td>touch a.text</td><td>创建文件</td></tr><tr><td>&gt;a.text</td><td>创建文件</td></tr><tr><td>touch .file.text</td><td>创建隐藏文件</td></tr><tr><td>[cat / less / more] file</td><td>查看文件</td></tr><tr><td>file a.txt</td><td>查看文件类型</td></tr><tr><td>man xx</td><td>打开xx指令的手册 /x 查找某参数 n 查找下一处</td></tr><tr><td>table</td><td>可以补全路径名</td></tr><tr><td>echo</td><td>打印</td></tr><tr><td>date</td><td>显示时间</td></tr><tr><td>cal</td><td>显示日历</td></tr></tbody></table><blockquote><p><strong>解压缩</strong></p></blockquote><table><thead><tr><th>指令</th><th>操作</th></tr></thead><tbody><tr><td>unzip</td><td>解压</td></tr><tr><td>zip -r</td><td>压缩 file.zip dir 压缩后的名称 压缩对象</td></tr><tr><td>tar zxvf</td><td>解压.tar.gz</td></tr><tr><td>tar zcvf</td><td>压缩文件</td></tr><tr><td>tar jxvf</td><td>解压tar.bz2</td></tr><tr><td>tar jcvf</td><td>解压tar.bz2</td></tr></tbody></table><blockquote><p><strong>重定向</strong></p></blockquote><table><thead><tr><th>指令</th><th>操作</th></tr></thead><tbody><tr><td>丨</td><td>管道线</td></tr><tr><td>&lt;</td><td>标准输入重定向</td></tr><tr><td>&gt;</td><td>把输出流保存到文件中 重定向前把文件清空</td></tr><tr><td>&gt;&gt;</td><td>把输出流保存到文件中 不清空文件</td></tr><tr><td>cat file1 &gt;file</td><td>把file1中的内容写入file中</td></tr><tr><td>cat file1 &gt;&gt;file</td><td>把file1中的内容写入file内容后</td></tr><tr><td>ls shit 2 &gt;out.txt</td><td>标准错误输出</td></tr></tbody></table><blockquote><p><strong>权限</strong></p></blockquote><p>用户在自己的主目录有写权限，在其它目录没有。</p><table><thead><tr><th>指令</th><th>操作</th></tr></thead><tbody><tr><td>su -</td><td>更改用户为root</td></tr><tr><td>sudo</td><td>超级用户</td></tr><tr><td>chmod +x +r +w</td><td>添加执行/读/写权限</td></tr><tr><td>chmod 777</td><td>添加全部权限</td></tr></tbody></table><blockquote><p><strong>进程</strong></p></blockquote><table><thead><tr><th>指令</th><th>操作</th></tr></thead><tbody><tr><td>ps -[ef丨aux] 丨grep 应用名称</td><td>查看进程</td></tr><tr><td>kill [-9] pid</td><td>结束某个程序</td></tr></tbody></table><blockquote><p><strong>搜索</strong></p></blockquote><table><thead><tr><th>指令</th><th>操作</th></tr></thead><tbody><tr><td>find file -type f</td><td>搜索文件</td></tr><tr><td>find dir/ -type d</td><td>搜索目录</td></tr></tbody></table><blockquote><p><strong>概念</strong></p></blockquote><table><thead><tr><th>概念</th><th>解释</th></tr></thead><tbody><tr><td>绝对路径</td><td>以 <code>/</code> 开头的路径</td></tr><tr><td>相对路径</td><td>相对于当前工作路径 ./当前工作目录 ../上一级目录</td></tr><tr><td>通配符</td><td>例如 <code>*</code></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;shell的基本常用命令                                                                                                                             
      
    
    </summary>
    
      <category term="Linux" scheme="http://gavinliu4011.github.io/categories/Linux/"/>
    
    
      <category term="Shell" scheme="http://gavinliu4011.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Linux环境下安装Python3.X</title>
    <link href="http://gavinliu4011.github.io/post/c8a586cb.html"/>
    <id>http://gavinliu4011.github.io/post/c8a586cb.html</id>
    <published>2017-08-05T15:33:23.000Z</published>
    <updated>2017-08-05T07:33:38.437Z</updated>
    
    <content type="html"><![CDATA[<p>Linux下大部分系统默认自带python2.x的版本，最常见的是python2.6或python2.7版本，默认的python被系统很多程序所依赖，比如centos下的yum就是python2写的，所以默认版本不要轻易删除，否则会有一些问题，如果需要使用最新的Python3那么我们可以编译安装源码包到独立目录，这和系统默认环境之间是没有任何影响的，python3和python2两个环境并存即可</p><h2 id="Linux环境下安装Python3-X"><a href="#Linux环境下安装Python3-X" class="headerlink" title="Linux环境下安装Python3.X"></a>Linux环境下安装Python3.X</h2><blockquote><p>1.下载Python源代码并解压缩到指定目录</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz95cxo3u633jbk49xrpZ ~]<span class="comment"># wget https://www.python.org/ftp/python/3.6.5/Python-3.6.5.tar.xz</span></span><br><span class="line">[root@iZwz95cxo3u633jbk49xrpZ ~]<span class="comment"># xz -d Python-3.6.5.tar.xz</span></span><br><span class="line">[root@iZwz95cxo3u633jbk49xrpZ ~]<span class="comment"># tar -xvf Python-3.6.5.tar</span></span><br></pre></td></tr></table></figure><blockquote><p>2.安装依赖库,没有安装可能导致Python在最后安装失败</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz95cxo3u633jbk49xrpZ ~]<span class="comment"># yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel</span></span><br></pre></td></tr></table></figure><blockquote><p>3.进入Python源码目录进行配置和安装</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz95cxo3u633jbk49xrpZ ~]<span class="comment"># cd Python-3.6.5</span></span><br><span class="line">[root@iZwz95cxo3u633jbk49xrpZ ~]<span class="comment"># ./configure --prefix=/usr/local/python36 --enable-optimizations</span></span><br><span class="line"><span class="comment"># 待上面命令成功后</span></span><br><span class="line">[root@iZwz95cxo3u633jbk49xrpZ ~]<span class="comment"># make &amp;&amp; make install</span></span><br><span class="line"><span class="comment">#如果在中途遇见错误,解决错误信息再重新执行make &amp;&amp; make install即可</span></span><br></pre></td></tr></table></figure><blockquote><p>4.创建软链接</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz95cxo3u633jbk49xrpZ ~]<span class="comment"># ln -s /usr/local/python36/bin/python3 /usr/bin/python3</span></span><br><span class="line">[root@iZwz95cxo3u633jbk49xrpZ ~]<span class="comment"># ln -s /usr/local/python36/bin/pip3 /usr/bin/pip3</span></span><br><span class="line">[root@iZwz95cxo3u633jbk49xrpZ ~]<span class="comment"># ln -s /usr/local/python36/bin/2to3 /usr/bin/2to3</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">注意:要用ipython环境要先安装ipyton</span><br><span class="line">[root@iZwz95cxo3u633jbk49xrpZ ~]<span class="comment"># pip3 install ipython</span></span><br><span class="line">[root@iZwz95cxo3u633jbk49xrpZ ~]<span class="comment"># ln -s /usr/local/python36/bin/ipython3 /usr/bin/ipython3</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Linux下大部分系统默认自带python2.x的版本，最常见的是python2.6或python2.7版本，默认的python被系统很多程序所依赖，比如centos下的yum就是python2写的，所以默认版本不要轻易删除，否则会有一些问题，如果需要使用最新的Python
      
    
    </summary>
    
      <category term="Python" scheme="http://gavinliu4011.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://gavinliu4011.github.io/tags/Python/"/>
    
      <category term="Linux" scheme="http://gavinliu4011.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Hexo</title>
    <link href="http://gavinliu4011.github.io/post/b132932.html"/>
    <id>http://gavinliu4011.github.io/post/b132932.html</id>
    <published>2017-07-22T11:05:10.000Z</published>
    <updated>2017-07-22T03:05:24.809Z</updated>
    
    <content type="html"><![CDATA[<p>使用hexo搭建一个博客，并托管在github pages上的简易教程。                                                                                    </p><blockquote><p>什么是Hexo?</p></blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><blockquote><p>安装前提</p></blockquote><p>安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：</p><ul><li><a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a></li><li><a href="http://git-scm.com/" target="_blank" rel="noopener">Git</a></li></ul><p>如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>如果有环境问题,请参考<a href="https://hexo.bootcss.com/docs/" target="_blank" rel="noopener">Hexo文档</a></p><h3 id="如何使用Hexo搭建Github-Pages博客"><a href="#如何使用Hexo搭建Github-Pages博客" class="headerlink" title="如何使用Hexo搭建Github Pages博客"></a>如何使用Hexo搭建Github Pages博客</h3><blockquote><p>创建仓库</p></blockquote><p>首先我们需要在<a href="https://github.com/" target="_blank" rel="noopener">Github</a>创建一个账号,然后我们登录进去创建仓库</p><p>仓库名称<strong>必须</strong>为 <strong>username</strong>.github.io (注：username为你在github的用户名)</p><p><img src="/..\img\hexo\1.png" alt="1"></p><p><img src="/..\img\hexo\2.png" alt="1"></p><p>如果报错就是仓库已经存在。</p><p>仓库创建成功后，github会给你该仓库的https和ssh地址，复制ssh地址作为备用</p><blockquote><p>建站</p></blockquote><p>上面的操作完成后,我们就可以进行建站操作了,可以参照<a href="https://hexo.bootcss.com/docs/setup.html" target="_blank" rel="noopener">Hexo建站文档</a>,也可以运行下面的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>上面操作完成后我们建站就成功了,现在我们可以看看自己的博客是什么样子了。在命令行运行下面这条的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-server --save</span><br></pre></td></tr></table></figure><p>server安装成功后，启动server便可以把博客跑起来：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>现在默认是在本地运行,运行hexo server成功后会出现一个<a href="http://localhost:4000/地址" target="_blank" rel="noopener">http://localhost:4000/地址</a></p><p><img src="/../img/hexo/hexo-blog.png" alt="hexo-blog.png"></p><blockquote><p>部署</p></blockquote><p>到现在我们自己的博客就已经搭建起来,现在我们修改项目的部署信息</p><p>在博客的根目录下可以找到<strong>_config.yml</strong>文件,在文件最后可以找到deploy信息,现做如下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:&#123;username&#125;/&#123;username&#125;.github.io.git # 这个地址就是github创建仓库后的shh地址</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>以上配置好后,我们再配置一下SSH key,关于SSH key的生成和配置，github有详细的<a href="https://help.github.com/articles/generating-ssh-keys/" target="_blank" rel="noopener">帮助文档</a>可以参考。这里做简单介绍：</p><p><img src="/..\img\hexo\3.png" alt="3"></p><p><img src="/..\img\hexo\4.png" alt="4"></p><p><img src="/..\img\hexo\5.png" alt="5"></p><p>完成以上操作就完成了SSH key的配置。</p><p>有了这些配置后便可以提交部署到Github Pages,执行下面的命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean <span class="comment"># 删除database和public文件夹,因为执行了hexo server</span></span><br></pre></td></tr></table></figure><p>成功后再执行下面的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate <span class="comment"># 生成新的部署所需要的文件</span></span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>在执行了hexo deploy命令后可能会出现报错<strong>ERROR Deployer not found : github</strong>,这个需要再安装<strong>hexo-deployer-git</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>完成后再次执行<code>hexo deploy</code>命令,待命令执行成功后我们就成功部署了自己的博客,直接访问<code>https://your-github-username.github.io/</code>这样就可以看到默认主题的博客了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用hexo搭建一个博客，并托管在github pages上的简易教程。                                                                                    &lt;/p&gt;
&lt;blockquote&gt;
      
    
    </summary>
    
      <category term="Hexo" scheme="http://gavinliu4011.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://gavinliu4011.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Python3基础之函数</title>
    <link href="http://gavinliu4011.github.io/post/5e13db2f.html"/>
    <id>http://gavinliu4011.github.io/post/5e13db2f.html</id>
    <published>2017-07-19T13:38:10.000Z</published>
    <updated>2017-07-19T05:38:27.799Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Python3基础之函数"><a href="#Python3基础之函数" class="headerlink" title="Python3基础之函数"></a>Python3基础之函数</h3><blockquote><p>三元运算符补充</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 三元运算符(或者三目运算)</span></span><br><span class="line"><span class="comment"># 格式</span></span><br><span class="line"><span class="comment"># 结果 = 值1 if 条件 else 值2</span></span><br><span class="line">result = <span class="keyword">True</span> <span class="keyword">if</span> <span class="number">1</span>&gt;<span class="number">2</span> <span class="keyword">else</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果条件成立则返回'值1',否则返回'值2'</span></span><br></pre></td></tr></table></figure><blockquote><p>函数的定义</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">在开始之前我们先上一段代码:</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>：</span><br><span class="line">    <span class="keyword">if</span> cpu利用率 &gt; <span class="number">90</span>%:</span><br><span class="line">        <span class="comment"># 发送邮件提醒</span></span><br><span class="line">        连接邮箱服务器</span><br><span class="line">        发送邮件</span><br><span class="line">        关闭连接</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> 硬盘使用空间 &gt; <span class="number">90</span>%:</span><br><span class="line">        <span class="comment"># 发送邮件提醒</span></span><br><span class="line">        连接邮箱服务器</span><br><span class="line">        发送邮件</span><br><span class="line">        关闭连接</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> 内存占用 &gt; <span class="number">80</span>%:</span><br><span class="line">        <span class="comment"># 发送邮件提醒</span></span><br><span class="line">        连接邮箱服务器</span><br><span class="line">        发送邮件</span><br><span class="line">        关闭连接</span><br></pre></td></tr></table></figure><p>不知道大家是否注意到以上代码有很多重复的代码,要写出高质量的代码首先要解决的就是重复代码的问题。我们可以将上面的’发送邮件提醒’功能封装成一个函数,当满足条件时调用函数即可。<br>所以某些具有特殊功能的代码块, 将这些特定的代码块给他分封装起来,这个封装起来的代码块就是函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义函数</span></span><br><span class="line">函数的定义主要有如下要点：</span><br><span class="line">    <span class="number">1.</span><span class="function"><span class="keyword">def</span>：表示函数的关键字</span></span><br><span class="line"><span class="function">    2.函数名：函数的名称，日后根据函数名调用函数（函数的命名规则和变量的命名规则一致）</span></span><br><span class="line"><span class="function">    3.函数体：函数中进行一系列的逻辑计算，如：发送邮件</span></span><br><span class="line"><span class="function">    4.参数：为函数体提供数据</span></span><br><span class="line"><span class="function">    5.返回值：当函数执行完毕后，可以给调用者返回数据。</span></span><br><span class="line"><span class="function">下面我们重构一下上面发送邮件的代码：</span></span><br><span class="line"><span class="function"><span class="title">def</span> <span class="title">send</span><span class="params">()</span>:</span></span><br><span class="line">       </span><br><span class="line">    发送邮件的代码...</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">if</span> success: <span class="comment">#发送成功</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">   </span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">       </span><br><span class="line">    <span class="comment"># 每次执行发送邮件函数，都会将返回值自动赋值给result</span></span><br><span class="line">    <span class="comment"># 之后，可以根据result来写日志，或重发等操作</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment"># 在这儿根据函数名'send'来调用函数</span></span><br><span class="line">    result = send()</span><br><span class="line">    <span class="keyword">if</span> result == <span class="keyword">False</span>:</span><br><span class="line">        记录日志，短信发送失败...</span><br></pre></td></tr></table></figure><blockquote><p>匿名函数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">对于简单的函数，也存在一种简便的表示方式，即：<span class="keyword">lambda</span>表达式</span><br><span class="line"><span class="comment"># 普通方式</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(arg)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> arg + <span class="number">5</span></span><br><span class="line">print(sum(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匿名函数</span></span><br><span class="line">lambda_sum = <span class="keyword">lambda</span> x, y: x + y</span><br><span class="line">print(lambda_sum(<span class="number">5</span>, <span class="number">5</span>))</span><br></pre></td></tr></table></figure><blockquote><p>函数的运用</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 递归调用,遍历文件夹目录</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all_dir</span><span class="params">(path, str=<span class="string">"|--"</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">        实现目录的遍历</span></span><br><span class="line"><span class="string">    :param path: 遍历目录的路径</span></span><br><span class="line"><span class="string">    :param str: 样式</span></span><br><span class="line"><span class="string">    :return: </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 返回一个指定文件夹(目录)包含文件和文件夹(目录),并且返回一个列表,但是不包含.和..,他一般按照英文首字母排序</span></span><br><span class="line">    fill_all = os.listdir(path)</span><br><span class="line">    <span class="comment"># print(fillAll)</span></span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> fill_all:</span><br><span class="line">        <span class="comment"># 一定不能少了全路径的拼接</span></span><br><span class="line">        file_path = os.path.join(path, filename)</span><br><span class="line">        <span class="comment"># print(filePath)</span></span><br><span class="line">        <span class="comment"># 判断filePath是否是目录</span></span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(file_path):</span><br><span class="line">            print(str + <span class="string">'文件夹'</span> + filename)</span><br><span class="line">            <span class="comment"># filePath是目录</span></span><br><span class="line">            get_all_dir(file_path, <span class="string">"\t"</span> + str)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># filePath不是目录,即是文件</span></span><br><span class="line">            print(str + <span class="string">'文件:'</span> + filename)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">get_all_dir(<span class="string">'../gavinliu_study'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Python3基础之函数&quot;&gt;&lt;a href=&quot;#Python3基础之函数&quot; class=&quot;headerlink&quot; title=&quot;Python3基础之函数&quot;&gt;&lt;/a&gt;Python3基础之函数&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;三元运算符补充&lt;/p&gt;
&lt;/blo
      
    
    </summary>
    
      <category term="Python基础" scheme="http://gavinliu4011.github.io/categories/Python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Python" scheme="http://gavinliu4011.github.io/tags/Python/"/>
    
      <category term="函数" scheme="http://gavinliu4011.github.io/tags/%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python3基础之分支结构和循环结构</title>
    <link href="http://gavinliu4011.github.io/post/8b5ec2d0.html"/>
    <id>http://gavinliu4011.github.io/post/8b5ec2d0.html</id>
    <published>2017-07-16T10:38:02.000Z</published>
    <updated>2017-07-16T02:38:14.250Z</updated>
    
    <content type="html"><![CDATA[<p>在Python中，要构造分支结构可以使用<code>if</code>、<code>elif</code>和<code>else</code>关键字。所谓关键字就是有特殊含义的单词，像<code>if</code>和<code>else</code>就是专门用于构造分支结构的关键字，很显然你不能够使用它作为变量名（事实上，用作其他的标识符也是不可以）</p><p>在程序中我们需要重复的执行某条或某些指令，例如比如在我们的程序中要实现每隔1秒中在屏幕上打印一个”hello, world”这样的字符串并持续一个小时，我们肯定不能够将<code>print(&#39;hello, world&#39;)</code>这句代码写上3600遍。当然你可能已经注意到了，刚才的描述中其实是重复的动作</p><h3 id="Python3基础之分支结构和循环结构"><a href="#Python3基础之分支结构和循环结构" class="headerlink" title="Python3基础之分支结构和循环结构"></a>Python3基础之分支结构和循环结构</h3><blockquote><p>分支结构</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">第一种:  <span class="keyword">if</span>结构</span><br><span class="line">格式:  <span class="keyword">if</span> 表达式:</span><br><span class="line">           语句块</span><br><span class="line">执行流程:程序遇到<span class="keyword">if</span>结构时,判断表达式的真假,如果为真,则执行语句块,否则结束<span class="keyword">if</span>结构    </span><br><span class="line">表达式为假的情况: <span class="number">0</span> <span class="string">''</span> <span class="keyword">None</span>  <span class="keyword">False</span> []  ()  &#123;&#125;</span><br><span class="line">num1 = <span class="number">78</span></span><br><span class="line">num2 = <span class="number">45</span></span><br><span class="line">tmp = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> num1 &gt; num2:</span><br><span class="line">    tmp = num1</span><br><span class="line">    num1 = num2</span><br><span class="line">    num2 = tmp</span><br><span class="line">    print(num1, num2)</span><br><span class="line">第二种: <span class="keyword">if</span>-<span class="keyword">else</span>结构</span><br><span class="line">格式: <span class="keyword">if</span> 表达式:</span><br><span class="line">          语句块<span class="number">1</span></span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">          语句块<span class="number">2</span></span><br><span class="line">执行流程:程序执行到<span class="keyword">if</span>结构,判断表达式的真假,如果为真,则执行语句块<span class="number">1</span>,如果为假,则执行<span class="keyword">else</span>中的语句块的内容</span><br><span class="line"><span class="comment"># 判断一个年份是否是闰年</span></span><br><span class="line">year = int(input(<span class="string">'请输入你要输入的年份:'</span>))</span><br><span class="line"><span class="keyword">if</span> ((year % <span class="number">4</span> == <span class="number">0</span>) <span class="keyword">and</span> (year % <span class="number">100</span> != <span class="number">0</span>))  <span class="keyword">or</span> (year % <span class="number">400</span> == <span class="number">0</span>):</span><br><span class="line">    print(<span class="string">'是润年'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'不是闰年'</span>)</span><br><span class="line">第三种: <span class="keyword">if</span>-<span class="keyword">elif</span>-<span class="keyword">else</span></span><br><span class="line">格式: <span class="keyword">if</span> 表达式<span class="number">1</span>:</span><br><span class="line">          语句块<span class="number">1</span></span><br><span class="line">      <span class="keyword">elif</span> 表达式<span class="number">2</span>:</span><br><span class="line">          语句块<span class="number">2</span></span><br><span class="line">      <span class="keyword">elif</span> 表达式<span class="number">3</span>:</span><br><span class="line">          语句块<span class="number">3</span></span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">          语句块n</span><br><span class="line">执行流程:程序执行到<span class="keyword">if</span>语句,判断表达式<span class="number">1</span>的真假,如果为真,则执行语句<span class="number">1</span>,否则判断表达式<span class="number">2</span>的真假,如果为真,则执行表达式<span class="number">2</span>,一次类推,直到最后一个表达式为假,就执行<span class="keyword">else</span>里边的语句块n</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment"># 产生一个1-6的随机数</span></span><br><span class="line">num = random.randint(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line"><span class="comment"># print(num)</span></span><br><span class="line"><span class="keyword">if</span> num == <span class="number">1</span>:</span><br><span class="line">    print(<span class="string">'这个随机数乘以1后是%d'</span> % (num * <span class="number">1</span>))</span><br><span class="line"><span class="keyword">elif</span> num == <span class="number">2</span>:</span><br><span class="line">    print(<span class="string">'这个随机数乘以2后是%d'</span> % (num * <span class="number">2</span>))</span><br><span class="line"><span class="keyword">elif</span> num == <span class="number">3</span>:</span><br><span class="line">    print(<span class="string">'这个随机数乘以3后是%d'</span> % (num * <span class="number">3</span>))</span><br><span class="line"><span class="keyword">elif</span> num == <span class="number">4</span>:</span><br><span class="line">    print(<span class="string">'这个随机数乘以4后是%d'</span> % (num * <span class="number">4</span>))</span><br><span class="line"><span class="keyword">elif</span> num == <span class="number">5</span>:</span><br><span class="line">    print(<span class="string">'这个随机数乘以5后是%d'</span> % (num * <span class="number">5</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'这个随机数乘以本身后是%d'</span> % (num * num))</span><br><span class="line">    </span><br><span class="line">第四种: 嵌套</span><br><span class="line"><span class="keyword">if</span>  表达式<span class="number">1</span>:</span><br><span class="line">    <span class="keyword">if</span> 表达式<span class="number">2</span>:</span><br><span class="line">        语句块<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        语句块<span class="number">2</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    语句块<span class="number">3</span></span><br><span class="line">name = <span class="string">'xiaoming'</span></span><br><span class="line">password = <span class="string">'123456'</span></span><br><span class="line"></span><br><span class="line">user = input(<span class="string">'请输入用户名'</span>)</span><br><span class="line">pwd = input(<span class="string">'请输入密码'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> user == name:</span><br><span class="line">    <span class="keyword">if</span> pwd == password:</span><br><span class="line">        print(<span class="string">'恭喜你,登录成功'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'用户名或者密码错误2'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'用户名或者密码错误1'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>循环结构</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#for-in循环</span></span><br><span class="line"><span class="comment">#如果明确的知道循环执行的次数或者是要对一个容器进行迭代，使用for-in循环</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">用for循环实现1~100求和</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">101</span>):</span><br><span class="line">    sum += x</span><br><span class="line">print(sum)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输入两个正整数计算最大公约数和最小公倍数</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">num1 = int(input(<span class="string">"请输入第一个整数:"</span>))</span><br><span class="line">num2 = int(input(<span class="string">"请输入第二个整数:"</span>))</span><br><span class="line"><span class="comment"># actual = None</span></span><br><span class="line">actual = min(num1, num2)  <span class="comment"># 取最小的整数</span></span><br><span class="line"><span class="comment"># commonDivisorVal = None</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, actual + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> (num1 % i == <span class="number">0</span>) <span class="keyword">and</span> (num2 % i == <span class="number">0</span>):</span><br><span class="line">        commonDivisorVal = i</span><br><span class="line">print(<span class="string">"%d和%d的最大公约数是%d"</span> % (num1, num2, commonDivisorVal))</span><br><span class="line"></span><br><span class="line"><span class="comment">#while循环</span></span><br><span class="line"><span class="comment">#如果要构造不知道具体循环次数的循环结构，推荐使用while循环，while循环通过一个能够产生或转换出bool值的表达式来控制循环，表达式的值为True循环继续，表达式的值为False循环结束。</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">猜数字游戏</span></span><br><span class="line"><span class="string">计算机出一个1~100之间的随机数由人来猜</span></span><br><span class="line"><span class="string">计算机根据人猜的数字分别给出提示大一点/小一点/猜对了</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">answer = random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">counter = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    counter += <span class="number">1</span></span><br><span class="line">    number = int(input(<span class="string">'请输入: '</span>))</span><br><span class="line">    <span class="keyword">if</span> number &lt; answer:</span><br><span class="line">        print(<span class="string">'大一点'</span>)</span><br><span class="line">    <span class="keyword">elif</span> number &gt; answer:</span><br><span class="line">        print(<span class="string">'小一点'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'恭喜你猜对了!'</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">print(<span class="string">'你总共猜了%d次'</span> % counter)</span><br></pre></td></tr></table></figure><blockquote><p> 注意:上面的代码中使用了break关键字来提前终止循环，需要注意的是break只能终止它所在的那个循环，这一点在使用嵌套的循环结构需要注意。除了break之外，还有另一个是continue，它可以用来跳过本次循环直接进入下一轮循环。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在Python中，要构造分支结构可以使用&lt;code&gt;if&lt;/code&gt;、&lt;code&gt;elif&lt;/code&gt;和&lt;code&gt;else&lt;/code&gt;关键字。所谓关键字就是有特殊含义的单词，像&lt;code&gt;if&lt;/code&gt;和&lt;code&gt;else&lt;/code&gt;就是专门用于构造分支结构
      
    
    </summary>
    
      <category term="Python基础" scheme="http://gavinliu4011.github.io/categories/Python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Python" scheme="http://gavinliu4011.github.io/tags/Python/"/>
    
      <category term="分支结构" scheme="http://gavinliu4011.github.io/tags/%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84/"/>
    
      <category term="循环结构" scheme="http://gavinliu4011.github.io/tags/%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Python3基础之字符串、列表、元组、字典、集合等相关操作</title>
    <link href="http://gavinliu4011.github.io/post/9a7b293f.html"/>
    <id>http://gavinliu4011.github.io/post/9a7b293f.html</id>
    <published>2017-07-14T20:36:46.000Z</published>
    <updated>2017-07-14T12:37:00.358Z</updated>
    
    <content type="html"><![CDATA[<p>下面将一一介绍Python中的字符串、列表、元组、集合的相关操作</p><h3 id="字符串、列表、元组、字典、集合等相关操作"><a href="#字符串、列表、元组、字典、集合等相关操作" class="headerlink" title="字符串、列表、元组、字典、集合等相关操作"></a>字符串、列表、元组、字典、集合等相关操作</h3><blockquote><p>字符串操作</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">字符串一般情况使用单引号或者双引号引起来</span><br><span class="line">规则: 单不能套单,单可以套双</span><br><span class="line">      双不能套双,双可以套单</span><br><span class="line"></span><br><span class="line"><span class="comment">## 多行字符串</span></span><br><span class="line"><span class="comment"># 方式二</span></span><br><span class="line">str3 = <span class="string">'3月25号我来到了美丽的成都,刚下飞机,'</span>\</span><br><span class="line">       <span class="string">'就碰到一个老外帅锅,结果他还跟我打招呼.但是我不会英语,好尴尬'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式一</span></span><br><span class="line">str4 = <span class="string">'''洁白的婚纱,手捧着鲜花 ,美丽的想通话.想起那年初夏,我为你牵挂.'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式三</span></span><br><span class="line">str5 = <span class="string">"""洁白的婚纱,手捧着鲜花 ,美丽的想通话.想起那年初夏,我为你牵挂."""</span></span><br><span class="line">print(str5)</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">##字符串的长度</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">len(): 获取字符串的长度</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">str1 = <span class="string">'lhy'</span></span><br><span class="line">str1 = <span class="string">'刘海艳'</span></span><br><span class="line">str1 = <span class="string">'幸福像花儿一样'</span></span><br><span class="line">print(len(str1))</span><br><span class="line"></span><br><span class="line">总结: 无论是字符还是汉字,只要有一个,则长度就是几个</span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">##提取某个字符</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">提取字符串中的某一个字符</span></span><br><span class="line"><span class="string">方式:</span></span><br><span class="line"><span class="string">从左往右开始, 下标从0开始提取</span></span><br><span class="line"><span class="string">str[0]   str[1]   str[2] ..... str[n]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">从优往左开始, 下标从-1开始</span></span><br><span class="line"><span class="string">str[-1]  str[-2] .....  str[-n]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">str1 = <span class="string">'It is a dog'</span></span><br><span class="line">print(str1[<span class="number">0</span>])</span><br><span class="line">print(str1[<span class="number">-2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># pytjon中的字符串一旦定义好之后,是不可以修改的</span></span><br><span class="line">str1[<span class="number">0</span>] = <span class="string">'i'</span></span><br><span class="line">print(<span class="string">'str1 ='</span>, str1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">##转义字符</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">转义字符: 将原来的意义给他去掉  \(这是反斜线)   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">str1 = <span class="string">'我最喜欢的一首歌是\'咱们结婚吧\''</span></span><br><span class="line">str1 = <span class="string">'you\'re a good man'</span></span><br><span class="line">print(str1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">系统里边有一些特殊的字符: \t(制表符) \n(换行符)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(<span class="string">'你好\\t宝强哥,你的媳妇是马蓉吗?'</span>)</span><br><span class="line">print(<span class="string">'你好\\n宋喆,你的情人是\t马蓉\n吗?'</span>)</span><br><span class="line"><span class="comment"># 如果想将原来具有特殊含义的字符失去本身的意义,我们可以直接在整个字符串前边添加一个r</span></span><br><span class="line">print(<span class="string">r'你好\t宝强哥,你的媳妇是马蓉吗?'</span>)</span><br><span class="line">print(<span class="string">r'你好\n宋喆,你的情人是马蓉吗?'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">##字符串截取</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">字符串截取:</span></span><br><span class="line"><span class="string">str1[开始下标:结束下标]: 从开始下标截取,到结束下标=结尾,.包含开始下标,但不包含结束下标</span></span><br><span class="line"><span class="string">str1[0:5] 提取是的结果你是zhous</span></span><br><span class="line"><span class="string">str1[:3] 默认从下标0开始到结束的开区间</span></span><br><span class="line"><span class="string">str1[3:] 从指定的下标开始到结尾</span></span><br><span class="line"><span class="string">str1[-n:]: 从最后边提取n个</span></span><br><span class="line"><span class="string">str1[:]:  提取全部字符</span></span><br><span class="line"><span class="string">str1[::2]  根据下标每个n个提取一次</span></span><br><span class="line"><span class="string">str1[::-1]  将字符逆序排列</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">##字符串的格式化</span></span><br><span class="line">%s:    给字符串站位</span><br><span class="line">%d:     给int类型站位</span><br><span class="line">%f:     给浮点类型站位,  默认保留<span class="number">6</span>为小数</span><br><span class="line">        %<span class="number">.2</span>f:  保留两位小数</span><br><span class="line">        %<span class="number">10.2</span>f  共<span class="number">10</span>位,保留两位小数,其他为使用空格补齐</span><br><span class="line">         %<span class="number">010.2</span>f  共<span class="number">10</span>位,保留两位小数,其他为使用<span class="number">0</span>补齐</span><br><span class="line">%c:     打印一个字符</span><br><span class="line">%o:    将十进制转换成八进制</span><br><span class="line">%x:    将十进制转换成十六进制</span><br><span class="line"></span><br><span class="line">name = <span class="string">'宝强'</span></span><br><span class="line">age = <span class="number">36</span></span><br><span class="line">like = <span class="string">'green'</span></span><br><span class="line">print(<span class="string">'他是&#123;&#125;,今年&#123;&#125;,他喜欢&#123;&#125;'</span> .format(name, age, like))</span><br><span class="line">print(<span class="string">'他是&#123;lala&#125;,今年&#123;wawa&#125;, 他喜欢&#123;heihei&#125;'</span> .format(wawa=age, heihei=like, lala=name))</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">##字符串比较大小</span></span><br><span class="line">[规则:]从第一个字符开始比较,将字符转换成ascii值进行比较</span><br><span class="line">如果小于则返回<span class="keyword">True</span>,否则返回<span class="keyword">False</span></span><br></pre></td></tr></table></figure><blockquote><p>列表操作</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">列表:  格式:  列表名 = [元素1, 元素2,,...]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># append()往列表后边追加一个元素</span></span><br><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">list1.append(<span class="number">100</span>)</span><br><span class="line"><span class="comment"># print(list1)</span></span><br><span class="line">list1.append([<span class="number">200</span>, <span class="number">400</span>, <span class="number">600</span>])</span><br><span class="line"><span class="comment"># print(list1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在末尾一次性追加另外一个列表中的多个值</span></span><br><span class="line">list2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">list2.extend([<span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>])</span><br><span class="line"><span class="comment"># print(list2)</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">insert():在指定下标出添加一个元素,原来位置处的元素往后移动</span></span><br><span class="line"><span class="string">@参数一: 列表的下标</span></span><br><span class="line"><span class="string">@参数二: 列表中下标所对应的值</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">list3 = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">list3.insert(<span class="number">1</span>, <span class="number">250</span>)</span><br><span class="line"><span class="comment"># print(list3)</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">pop():将列表中指定下标的元素删除, 如果默认不传递参数,则删除的是最后一个元素</span></span><br><span class="line"><span class="string">@参数一: [可有可无] 列表对应的下标</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">list4 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">list4.pop()</span><br><span class="line">list4.pop()</span><br><span class="line"><span class="comment"># print(list4)</span></span><br><span class="line">list4.pop(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># print(list4)</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">remove():移除列表中指定的元素</span></span><br><span class="line"><span class="string">@参数一: 列表中的元素</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">list5 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">list5.remove(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># print(list5)</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">clear():清除列表中所有的元素</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">list6 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">list6.clear()</span><br><span class="line"><span class="comment"># print(list6)</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">index():获取列表元素锁对应的下标</span></span><br><span class="line"><span class="string">@参数一:  列表中的某一个元素</span></span><br><span class="line"><span class="string">返回值:  列表中元素所对应的下标</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">list7 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">index1 = list7.index(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># print(index1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取列表的长度</span></span><br><span class="line">list8 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="comment"># print(len(list8))</span></span><br><span class="line"></span><br><span class="line">list9 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"><span class="comment"># print(max(list9))</span></span><br><span class="line"></span><br><span class="line">list10 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"><span class="comment"># print(min(list9))</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">count(): 计算列表中元素出现的次数</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">list11 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"><span class="comment"># print(list11.count(3))</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">reverse():将列表进行倒序排列</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">list12 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">list12.reverse()</span><br><span class="line"><span class="comment"># print(list12)</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">sort():将列表中的元素进行升序排列</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">list13 = [<span class="number">1</span>, <span class="number">100</span>, <span class="number">78</span>, <span class="number">23</span>, <span class="number">65</span>, <span class="number">43</span>]</span><br><span class="line">list13.sort()</span><br><span class="line"><span class="comment"># print(list13)</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">引用传递:  </span></span><br><span class="line"><span class="string">在列表中,如果修改一个列表的元素,那么对应的另外一个列表的元素也改变</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">list14 = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">list15 = list14</span><br><span class="line">list15[<span class="number">1</span>] = <span class="number">200</span></span><br><span class="line"><span class="comment"># print(list14)</span></span><br><span class="line"><span class="comment"># print(list15)</span></span><br><span class="line"><span class="comment"># id():查看内存的地址</span></span><br><span class="line"><span class="comment"># print(id(list14))</span></span><br><span class="line"><span class="comment"># print(id(list15))</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">值传递</span></span><br><span class="line"><span class="string">在列表中修改一个元素的值时,对应的另外一个列表中的值是不发生改变的</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">list16 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">list17 = list16.copy()</span><br><span class="line">list17[<span class="number">1</span>] = <span class="number">250</span></span><br><span class="line">print(list16)</span><br><span class="line">print(list17)</span><br><span class="line">print(id(list16))</span><br><span class="line">print(id(list17))</span><br></pre></td></tr></table></figure><blockquote><p>元组操作</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">元组:也是一种有序集合</span></span><br><span class="line"><span class="string">特点:</span></span><br><span class="line"><span class="string">1.跟列表非常相似:  list1 = []   tuple1 = ()</span></span><br><span class="line"><span class="string">2.一旦定义好之后不能修改</span></span><br><span class="line"><span class="string">3.使用小括号括起一个集合</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 创建一个空元祖</span></span><br><span class="line">tuple1 = ()</span><br><span class="line"><span class="comment"># print(tuple1)</span></span><br><span class="line"><span class="comment"># print(type(tuple1))</span></span><br><span class="line"></span><br><span class="line">tuple2 = (<span class="number">23</span>, <span class="number">3.14</span>, <span class="string">'aaa'</span>, <span class="keyword">None</span>, <span class="keyword">True</span>)</span><br><span class="line"><span class="comment"># print(tuple2)</span></span><br><span class="line"></span><br><span class="line">tuple3 = (<span class="number">4</span>, )<span class="comment">#tuple</span></span><br><span class="line">tuple3 = (<span class="number">4</span>)<span class="comment">#int</span></span><br><span class="line"><span class="comment"># print(tuple3)</span></span><br><span class="line"><span class="comment"># print(type(tuple3))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问元祖的元素</span></span><br><span class="line">tuple4 = (<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line"><span class="comment"># print(tuple4[0])</span></span><br><span class="line"><span class="comment"># print(tuple4[1])</span></span><br><span class="line"><span class="comment"># 元祖在访问的时候一定不能溢出(越界),直接报错</span></span><br><span class="line"><span class="comment"># print(tuple4[5])</span></span><br><span class="line"><span class="comment"># 获取元祖中最后一个元素</span></span><br><span class="line"><span class="comment"># print(tuple4[-1])</span></span><br><span class="line"><span class="comment"># print(tuple4[-2])</span></span><br><span class="line"><span class="comment"># 一定不能越界</span></span><br><span class="line"><span class="comment"># print(tuple4[-6])</span></span><br><span class="line"></span><br><span class="line">tuple5 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="number">12</span>, <span class="number">34</span>, <span class="number">45</span>])</span><br><span class="line"><span class="comment"># print(tuple5)</span></span><br><span class="line"><span class="comment"># tuple5[0] = 150#直接报错, 元祖定义好之后是不能修改的</span></span><br><span class="line"><span class="comment"># print(tuple5)</span></span><br><span class="line"><span class="comment"># print(tuple5[-1][-2])</span></span><br><span class="line"><span class="comment"># print(tuple5[4][1])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除元祖的用法跟删除变量的用法一致</span></span><br><span class="line">tuple6 = (<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line"><span class="keyword">del</span> tuple6</span><br><span class="line"><span class="comment"># print(tuple6)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 元祖进行操作</span></span><br><span class="line">tuple7 = (<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">tuple8 = (<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>)</span><br><span class="line"><span class="comment"># 将两个元祖合并成一个新的元祖</span></span><br><span class="line">tuple9 = tuple7 + tuple8</span><br><span class="line"><span class="comment"># print(tuple9)</span></span><br><span class="line"><span class="comment"># print(tuple7, tuple8)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将元祖重复n次,最后返回一个新的元祖</span></span><br><span class="line">tuple10 = (<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment"># print(tuple10 * 10)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断一个元素是否在一个元祖中,如果在返回True,否则返回False</span></span><br><span class="line">tuple11 = (<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>)</span><br><span class="line"><span class="comment"># print(4 in tuple11)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 元祖的截取</span></span><br><span class="line"><span class="comment"># 格式: 元祖名[开始下标:结束下标]</span></span><br><span class="line">tuple12 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>,<span class="number">10</span>)</span><br><span class="line"><span class="comment"># print(tuple12[1:5])</span></span><br><span class="line"><span class="comment"># print(tuple12[3:])</span></span><br><span class="line"><span class="comment"># print(tuple12[:6])</span></span><br><span class="line"><span class="comment"># 将元祖进行逆序排列</span></span><br><span class="line"><span class="comment"># print(tuple12[::-1])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 二维元祖:</span></span><br><span class="line">tuple13 = ((<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>), (<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>))</span><br><span class="line"><span class="comment"># print(tuple13[1][1])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 元祖的方法</span></span><br><span class="line"><span class="comment"># 求一个元祖的长度</span></span><br><span class="line">tuple14 = (<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment"># print(len(tuple14))</span></span><br><span class="line"><span class="comment"># print(max(tuple14))</span></span><br><span class="line"><span class="comment"># print(min(tuple14))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对列表进行遍历</span></span><br><span class="line"><span class="comment"># for i in [1, 2, 3, 4, 5]:</span></span><br><span class="line"><span class="comment">#     print(i)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对元祖进行遍历</span></span><br><span class="line"><span class="comment"># for x in (3, 4, 5, 6, 7):</span></span><br><span class="line"><span class="comment">#     print(x)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将列表转换成元祖</span></span><br><span class="line">list11 = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line">tuple15 = tuple(list11)</span><br><span class="line"><span class="comment"># print(tuple15)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将元祖转换成列表</span></span><br><span class="line">tuple16 = (<span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">9</span>)</span><br><span class="line">list12 = list(tuple16)</span><br><span class="line"><span class="comment"># print(list12)</span></span><br><span class="line"></span><br><span class="line">list13 = range(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">print(type(list13))</span><br><span class="line"><span class="comment"># range(): 从开始值开始,但不包含结束值[0, 10)</span></span><br><span class="line"><span class="comment"># for i in range(0, 10):</span></span><br><span class="line"><span class="comment">#     print(i)</span></span><br></pre></td></tr></table></figure><blockquote><p>字典操作</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">dict(字典): 在字典里边一般存放的是键值对的形式.</span></span><br><span class="line"><span class="string">键1 = 值1   key = value</span></span><br><span class="line"><span class="string">键1 : 值1</span></span><br><span class="line"><span class="string">写法: &#123;键1:值1, 键2:值2, 键3:值3&#125;</span></span><br><span class="line"><span class="string">例子:dict1 = &#123;'name': '刘海艳', 'age': 17, 'sex': 'girl'&#125;</span></span><br><span class="line"><span class="string">注意事项:</span></span><br><span class="line"><span class="string">1.在字典中键(key)的值必须是唯一</span></span><br><span class="line"><span class="string">2.在字典中可以存放多个键值对</span></span><br><span class="line"><span class="string">3.在字典中键(key)必须是不可变类型   字符串  整数都可以作为键(key)</span></span><br><span class="line"><span class="string">4.list和tuple都是有序集合, 而dictsahib无序集合</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 必须保证字典中的key是唯一的</span></span><br><span class="line">dict1 = &#123;<span class="string">'yelei'</span>: <span class="number">100</span>, <span class="string">'xiaoming'</span> : <span class="number">99</span>, <span class="string">'jianfei'</span>: <span class="number">59</span>, <span class="string">'zhouying'</span>: <span class="number">110</span>&#125;</span><br><span class="line"><span class="comment"># print(dict1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 元素的访问</span></span><br><span class="line"><span class="comment"># 获取的方式: 字典名[key]</span></span><br><span class="line"><span class="comment"># print(dict1['xiaoming'])</span></span><br><span class="line"><span class="comment"># print(dict1.get('yelei'))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print('yelei' in dict1)</span></span><br><span class="line"></span><br><span class="line">ret = dict1.get(<span class="string">'lhy'</span>)</span><br><span class="line"><span class="comment"># if ret == None:</span></span><br><span class="line"><span class="comment">#     print('没有')</span></span><br><span class="line"><span class="comment"># else:</span></span><br><span class="line"><span class="comment">#     print('有')</span></span><br><span class="line"></span><br><span class="line">dict2 = &#123;<span class="string">'user'</span>: <span class="string">'大黄'</span>, <span class="string">'sex'</span>: <span class="string">'男'</span>, <span class="string">'age'</span>: <span class="number">30</span>, <span class="string">'height'</span>: <span class="number">150</span> &#125;</span><br><span class="line"><span class="comment"># 添加元素</span></span><br><span class="line">dict2[<span class="string">'lover'</span>] = <span class="string">'小白'</span></span><br><span class="line"><span class="comment"># 一个key只能对应一个value</span></span><br><span class="line">dict2[<span class="string">'lover'</span>] = <span class="string">'小绿'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line">dict2[<span class="string">'lover'</span>] = <span class="string">'小花'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">dict2.pop(<span class="string">'sex'</span>)</span><br><span class="line"><span class="comment"># 直接报错,因为他是无需集合</span></span><br><span class="line"><span class="comment"># dict2.pop()</span></span><br><span class="line"><span class="comment"># print(dict2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历</span></span><br><span class="line"><span class="comment"># for x in dict2:</span></span><br><span class="line"><span class="comment">#     print(x, dict2[x])</span></span><br><span class="line"><span class="comment"># 获取字典所有的value和key</span></span><br><span class="line"><span class="comment"># print(dict2.values())</span></span><br><span class="line"><span class="comment"># print(dict2.keys())</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for i in dict2.values():</span></span><br><span class="line"><span class="comment">#     print(i)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># for i in dict2.keys():</span></span><br><span class="line"><span class="comment">#     print(i)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for k,v in dict2.items():</span></span><br><span class="line"><span class="comment">#     print(k, v)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#for k,v in enumerate(dict2):</span></span><br><span class="line"><span class="comment">#    print(k, v)</span></span><br></pre></td></tr></table></figure><blockquote><p>集合操作</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">set(集合):类似于dict, 也是无序的,以key-value新的形势存在,但是没有value</span></span><br><span class="line"><span class="string">作用: 是对list,tuple,dict进行去重的, 求交集.并集</span></span><br><span class="line"><span class="string">1.set是无序</span></span><br><span class="line"><span class="string">2.set集合是不可改变的</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set1 = set([1, 2, 3, 5, 3, 2])</span></span><br><span class="line"><span class="comment"># print(set1)</span></span><br><span class="line"><span class="comment"># print(type(set1))</span></span><br><span class="line"><span class="comment"># set2 = set((1, 2, 3, 5, 3, 2, 4, 5))</span></span><br><span class="line"><span class="comment"># print(set2)</span></span><br><span class="line"><span class="comment"># print(type(set2))</span></span><br><span class="line"><span class="comment"># set3 = set(&#123;3, 4, 5,5, 6, 3, 7&#125;)</span></span><br><span class="line"><span class="comment"># print(set3)</span></span><br><span class="line"><span class="comment"># print(type(set3))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加</span></span><br><span class="line">set4 = set([<span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">set4.add(<span class="number">8</span>)</span><br><span class="line"><span class="comment"># set4.add(3)#可以添加重复的值,但是没效果</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 总结:list和dict是可改变的, 而tuple是不可改变</span></span><br><span class="line"><span class="comment"># set4.add([10, 9])#直接报错,不能添加list</span></span><br><span class="line"><span class="comment"># set4.add((10, 9))</span></span><br><span class="line"><span class="comment"># set4.add(&#123;'a':1&#125;)#直接报错,不能添加字典</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># print(set4)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line">set5 = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="comment"># 将list dict tuple 等等整个插入进去</span></span><br><span class="line"><span class="comment"># set5.update([6, 7, 8])</span></span><br><span class="line"><span class="comment"># set5.update(&#123;9, 10&#125;)</span></span><br><span class="line"><span class="comment"># set5.update((11, 56))</span></span><br><span class="line"><span class="comment"># print(set5)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line"><span class="comment"># set6= set([3, 4, 5, 6, 7])</span></span><br><span class="line"><span class="comment"># set6.remove(4)</span></span><br><span class="line"><span class="comment"># print(set6)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历</span></span><br><span class="line">set7 = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>])</span><br><span class="line">set7 = set([<span class="string">'aaa'</span>, <span class="string">'bbb'</span>, <span class="string">'ccc'</span>])</span><br><span class="line">set7 = set((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"><span class="comment"># 在set集合中,没有value,即使有value也遍历不出来</span></span><br><span class="line">set7 = set(&#123;<span class="string">'name'</span>:<span class="string">'小花'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;)</span><br><span class="line"><span class="comment"># for i in set7:</span></span><br><span class="line"><span class="comment">#     print(i, end = ',')</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &amp; | - ^</span></span><br><span class="line">set8 = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">set9 = set([<span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">set10 = set8 &amp; set9</span><br><span class="line">set11 = set8 | set9</span><br><span class="line">set12 = set8 - set9</span><br><span class="line">set13 = set8 ^ set9</span><br><span class="line">print(set10)</span><br><span class="line">print(set11)</span><br><span class="line">print(set12)</span><br><span class="line">print(set13)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;下面将一一介绍Python中的字符串、列表、元组、集合的相关操作&lt;/p&gt;
&lt;h3 id=&quot;字符串、列表、元组、字典、集合等相关操作&quot;&gt;&lt;a href=&quot;#字符串、列表、元组、字典、集合等相关操作&quot; class=&quot;headerlink&quot; title=&quot;字符串、列表、元组、字典
      
    
    </summary>
    
      <category term="Python基础" scheme="http://gavinliu4011.github.io/categories/Python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="字符串" scheme="http://gavinliu4011.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="列表" scheme="http://gavinliu4011.github.io/tags/%E5%88%97%E8%A1%A8/"/>
    
      <category term="元组" scheme="http://gavinliu4011.github.io/tags/%E5%85%83%E7%BB%84/"/>
    
      <category term="字典" scheme="http://gavinliu4011.github.io/tags/%E5%AD%97%E5%85%B8/"/>
    
      <category term="集合" scheme="http://gavinliu4011.github.io/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>Python3基础之基本数据类型、变量和运算符</title>
    <link href="http://gavinliu4011.github.io/post/510bec9b.html"/>
    <id>http://gavinliu4011.github.io/post/510bec9b.html</id>
    <published>2017-07-12T14:43:30.000Z</published>
    <updated>2017-07-12T06:44:04.991Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Python3基础之基本数据类型、变量和运算符"><a href="#Python3基础之基本数据类型、变量和运算符" class="headerlink" title="Python3基础之基本数据类型、变量和运算符"></a>Python3基础之基本数据类型、变量和运算符</h3><ol><li><p>基本数据类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">在Python中，能够直接处理的数据类型有以下几种：</span><br><span class="line">    <span class="number">1</span>）整型:Python可以处理任意大小的整数，当然包括负整数</span><br><span class="line">    如：<span class="number">100</span> <span class="number">-100</span></span><br><span class="line">    计算机由于使用二进制，所以Python支持二进制（<span class="number">0b100</span>）、八进制(<span class="number">0o100</span>)和十六进制(<span class="number">0xff00</span>)表示</span><br><span class="line">    <span class="number">2</span>)浮点数:浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的</span><br><span class="line">    如: <span class="number">123.456</span> 但是对于很大或很小的浮点数，就必须用科学计数法表示，把<span class="number">10</span>用e替代，<span class="number">1.23</span>x10^<span class="number">9</span>就是<span class="number">1.23e9</span></span><br><span class="line">    <span class="number">3</span>)字符串型:字符串是以单引号或双引号括起来的任意文本</span><br><span class="line">    如: <span class="string">'hello world'</span> 或者 <span class="string">"hello world"</span></span><br><span class="line">    <span class="number">4</span>)布尔型:布尔值和布尔代数的表示完全一致，一个布尔值只有<span class="keyword">True</span>、<span class="keyword">False</span>两种值，要么是<span class="keyword">True</span>，要么是<span class="keyword">False</span>，在Python中，可以直接用<span class="keyword">True</span>、<span class="keyword">False</span>表示布尔值（请注意大小写）</span><br><span class="line">    如: <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">False</span></span><br><span class="line">        <span class="number">3</span> &gt; <span class="number">2</span></span><br><span class="line">        <span class="number">2</span> &lt; </span><br><span class="line">    <span class="number">5</span>)空类型:空类型是Python里一个特殊的值，用<span class="keyword">None</span>表示。<span class="keyword">None</span>不能理解为<span class="number">0</span>，因为<span class="number">0</span>是有意义的，而<span class="keyword">None</span>是一个特殊的空值。(请注意不要与其它语言中的null混淆)</span><br><span class="line">在Python中还支持复数、列表、字典、元组、集合等数据类型，之后会一一说明。</span><br></pre></td></tr></table></figure></li><li><p>变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">什么是变量</span><br><span class="line">    在计算机程序中，变量不仅可以是数字，还可以是任意数据类型。变量是一种存储数据的载体，其值可以被读取和修改。</span><br><span class="line">变量命名</span><br><span class="line">    a.只能有数字,字母,下划线组成</span><br><span class="line">    b.不能以数字开始</span><br><span class="line">    c.不要跟关键字和系统保留字冲突</span><br><span class="line">    `关键字:</span><br><span class="line">      [<span class="string">'False'</span>, <span class="string">'None'</span>, <span class="string">'True'</span>, <span class="string">'and'</span>, <span class="string">'as'</span>, <span class="string">'assert'</span>, <span class="string">'async'</span>, <span class="string">'await'</span>, <span class="string">'break'</span>, <span class="string">'class'</span>, <span class="string">'continue'</span>, <span class="string">'def'</span>, <span class="string">'del'</span>, <span class="string">'elif'</span>, <span class="string">'else'</span>, <span class="string">'except'</span>, <span class="string">'finally'</span>, <span class="string">'for'</span>, <span class="string">'from'</span>, <span class="string">'global'</span>, <span class="string">'if'</span>, <span class="string">'import'</span>, <span class="string">'in'</span>, <span class="string">'is'</span>, <span class="string">'lambda'</span>, <span class="string">'nonlocal'</span>, <span class="string">'not'</span>, <span class="string">'or'</span>, <span class="string">'pass'</span>, <span class="string">'raise'</span>, <span class="string">'return'</span>, <span class="string">'try'</span>, <span class="string">'while'</span>, <span class="string">'with'</span>, <span class="string">'yield'</span>]</span><br><span class="line">    d. 严格区分大小写</span><br><span class="line">    e. 见名之意</span><br><span class="line">    f. 遵循驼峰原则: UserName  userName   user_name</span><br><span class="line">变量的实用和作用</span><br><span class="line">    a = <span class="number">100</span></span><br><span class="line">    b = <span class="number">-100</span></span><br><span class="line">    c = <span class="number">3.1415926</span></span><br><span class="line">    d = <span class="keyword">True</span></span><br><span class="line">    e = <span class="keyword">False</span></span><br><span class="line">    f = <span class="keyword">None</span></span><br><span class="line">    作用是将不同的数据类型存到内存中</span><br></pre></td></tr></table></figure></li><li><p>运算符</p><p><img src="https://gitee.com/gavinliu4011/codes/6kuiqc4nd0swy9ga83bvf76/raw?blob_name=%E8%BF%90%E7%AE%97%E7%AC%A6.png" alt="img"></p><blockquote><p>Python支持多种运算符，下表大致按照优先级从高到低的顺序列出了所有的运算符，我们会陆续使用到它们。<br>说明:此片段引用原文<a href="https://blog.csdn.net/jackfrued/article/details/79392196" target="_blank" rel="noopener">https://blog.csdn.net/jackfrued/article/details/79392196</a></p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Python3基础之基本数据类型、变量和运算符&quot;&gt;&lt;a href=&quot;#Python3基础之基本数据类型、变量和运算符&quot; class=&quot;headerlink&quot; title=&quot;Python3基础之基本数据类型、变量和运算符&quot;&gt;&lt;/a&gt;Python3基础之基本数据类型、
      
    
    </summary>
    
      <category term="Python基础" scheme="http://gavinliu4011.github.io/categories/Python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Python" scheme="http://gavinliu4011.github.io/tags/Python/"/>
    
      <category term="数据类型" scheme="http://gavinliu4011.github.io/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
      <category term="变量" scheme="http://gavinliu4011.github.io/tags/%E5%8F%98%E9%87%8F/"/>
    
      <category term="运算符" scheme="http://gavinliu4011.github.io/tags/%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>Python之禅</title>
    <link href="http://gavinliu4011.github.io/post/6be2dbca.html"/>
    <id>http://gavinliu4011.github.io/post/6be2dbca.html</id>
    <published>2017-06-17T10:54:03.000Z</published>
    <updated>2017-06-17T02:54:15.145Z</updated>
    
    <content type="html"><![CDATA[<p>用过 Python的人，基本上都知道在交互式解释器中输入 import this 就会显示 Tim Peters 的 The Zen of Python，但它那偈语般的语句有点令人费解，所以我想分享一下我对它的体会，顺带给出我的翻译。</p><h3 id="Python之禅"><a href="#Python之禅" class="headerlink" title="Python之禅"></a>Python之禅</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Beautiful is better than ugly.</span><br><span class="line">优美胜于丑陋（Python 以编写优美的代码为目标）</span><br><span class="line"></span><br><span class="line">Explicit is better than implicit.</span><br><span class="line">明了胜于晦涩（优美的代码应当是明了的，命名规范，风格相似）</span><br><span class="line"></span><br><span class="line">Simple is better than complex.</span><br><span class="line">简洁胜于复杂（优美的代码应当是简洁的，不要有复杂的内部实现）</span><br><span class="line"></span><br><span class="line">Complex is better than complicated.</span><br><span class="line">复杂胜于凌乱（如果复杂不可避免，那代码间也不能有难懂的关系，要保持接口简洁）</span><br><span class="line"></span><br><span class="line">Flat is better than nested.</span><br><span class="line">扁平胜于嵌套（优美的代码应当是扁平的，不能有太多的嵌套）</span><br><span class="line"></span><br><span class="line">Sparse is better than dense.</span><br><span class="line">间隔胜于紧凑（优美的代码有适当的间隔，不要奢望一行代码解决问题）</span><br><span class="line"></span><br><span class="line">Readability counts.</span><br><span class="line">可读性很重要（优美的代码是可读的）</span><br><span class="line"></span><br><span class="line">Special cases aren&apos;t special enough to break the rules.</span><br><span class="line">Although practicality beats purity.</span><br><span class="line">即便假借特例的实用性之名，也不可违背这些规则（这些规则至高无上）</span><br><span class="line"></span><br><span class="line">Errors should never pass silently.</span><br><span class="line">不要包容所有错误</span><br><span class="line"></span><br><span class="line">Unless explicitly silenced.                                             </span><br><span class="line">除非你确定需要这样做（精准地捕获异常，不写 except:pass 风格的代码）</span><br><span class="line"></span><br><span class="line">In the face of ambiguity, refuse the temptation to guess.</span><br><span class="line">当存在多种可能，不要尝试去猜测</span><br><span class="line"></span><br><span class="line">There should be one-- and preferably only one --obvious way to do it.</span><br><span class="line">而是尽量找一种，最好是唯一一种明显的解决方案（如果不确定，就用穷举法）</span><br><span class="line"></span><br><span class="line">Although that way may not be obvious at first unless you&apos;re Dutch.</span><br><span class="line">虽然这并不容易，因为你不是 Python 之父（这里的 Dutch 是指 Guido ）</span><br><span class="line"></span><br><span class="line">Now is better than never.</span><br><span class="line">做也许好过不做</span><br><span class="line"></span><br><span class="line">Although never is often better than right now.</span><br><span class="line">但不假思索就动手还不如不做</span><br><span class="line"></span><br><span class="line">If the implementation is hard to explain, it&apos;s a bad idea.</span><br><span class="line">If the implementation is easy to explain, it may be a good idea.</span><br><span class="line">如果你无法向人描述你的方案，那肯定不是一个好方案；反之亦然（方案测评标准）</span><br><span class="line"></span><br><span class="line">Namespaces are one honking great idea -- let&apos;s do more of those!</span><br><span class="line">命名空间是一种绝妙的理念，我们应当多加利用（倡导与号召）</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;用过 Python的人，基本上都知道在交互式解释器中输入 import this 就会显示 Tim Peters 的 The Zen of Python，但它那偈语般的语句有点令人费解，所以我想分享一下我对它的体会，顺带给出我的翻译。&lt;/p&gt;
&lt;h3 id=&quot;Python之
      
    
    </summary>
    
      <category term="Python" scheme="http://gavinliu4011.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://gavinliu4011.github.io/tags/Python/"/>
    
  </entry>
  
</feed>
